<map version="0.9.0_Beta_8">
<!-- To view this file, download free mind mapping software Sharemind from http://www.cuifang.com/sharemind -->
<node CREATED="1585142332250" ID="ID_844093684" MODIFIED="1585142741910">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Java基础知识点
    </p>
    <p>
      java是面向对象的：抽象，封装，继承，多态
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
<node CREATED="1585142372623" ID="ID_1130745720" MODIFIED="1585142644410" POSITION="right" TEXT="">
<node CREATED="1560673546414" FOLDED="true" HGAP="81" ID="Freemind_Link_694456281" MODIFIED="1585142484546" TEXT="java&#x7684;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x53ca;&#x7279;&#x70b9;" VSHIFT="-77">
<edge COLOR="#356aa0"/>
<arrowlink DESTINATION="Freemind_Link_694456281" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Freemind_Arrow_Link_880869979" STARTARROW="None" STARTINCLINATION="0;0;"/>
<node CREATED="1560673597348" HGAP="35" ID="Freemind_Link_1004941611" MODIFIED="1567593129102" TEXT="&#x903b;&#x8f91;boolean" VSHIFT="-35"/>
<node CREATED="1560673616124" HGAP="40" ID="Freemind_Link_1660936714" MODIFIED="1567593137309" TEXT="&#x6574;&#x6570;&#x578b;" VSHIFT="-45">
<node CREATED="1582080072895" ID="Freemind_Link_203401647" MODIFIED="1582080091758" TEXT="byte,short,int long"/>
</node>
<node CREATED="1560673649740" HGAP="43" ID="Freemind_Link_1212567237" MODIFIED="1560674049153" TEXT="&#x5b57;&#x7b26;&#x578b;" VSHIFT="-4"/>
<node CREATED="1560673663628" HGAP="51" ID="Freemind_Link_1058875252" MODIFIED="1560673920647" TEXT="&#x6d6e;&#x70b9;&#x578b;" VSHIFT="50"/>
<node CREATED="1560674020875" HGAP="49" ID="Freemind_Link_1177973221" MODIFIED="1567595391217" TEXT="&#x6570;&#x636e;&#x4e4b;&#x95f4;&#x7684;&#x8f6c;&#x6362;&#x65b9;&#x6cd5;" VSHIFT="27">
<node CREATED="1560674112564" ID="Freemind_Link_996798432" MODIFIED="1567595418822" TEXT="string&#x3002;valueof(&#x6570;&#x5b57;)"/>
</node>
<node CREATED="1560674117436" HGAP="48" ID="Freemind_Link_979252846" MODIFIED="1560674126705" TEXT="&#x6570;&#x7ec4;&#x7684;&#x4f7f;&#x7528;" VSHIFT="22"/>
<node CREATED="1560675717858" HGAP="46" ID="Freemind_Link_986266055" MODIFIED="1574841308500" TEXT="java&#x8f93;&#x5165;&#x8f93;&#x51fa;" VSHIFT="45">
<node CREATED="1561389355795" ID="ID_406508777" MODIFIED="1567597126767">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      system.out.print(ln),如果是print,要加格式控制符
    </p>
    <p>
      println则输出字符，且会换行
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1561389461110" ID="ID_1651817760" MODIFIED="1561389715260">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      scanner scan =new scanner(system.in)
    </p>
    <p>
      
    </p>
    <p>
      scan.nextline(),next+基本类型如Boolean()
    </p>
    <p>
      
    </p>
    <p>
      注意scanner实例化的括号可以是文件
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1560674134572" FOLDED="true" HGAP="93" ID="Freemind_Link_1861590326" MODIFIED="1585142546932" TEXT="&#x8fd0;&#x7b97;&#x7b26;&#xff0c;&#x8bed;&#x53e5;" VSHIFT="-60">
<edge COLOR="#d01f3c"/>
<node CREATED="1560674335755" FOLDED="true" HGAP="75" ID="Freemind_Link_459840843" MODIFIED="1574841345054" TEXT="&#x8fd0;&#x7b97;&#x7b26;&#x4e0e;&#x8868;&#x8fbe;&#x5f0f;" VSHIFT="-30">
<node CREATED="1560674390603" HGAP="38" ID="Freemind_Link_151157738" MODIFIED="1560674601916" TEXT="&#x7b97;&#x672f;&#x7b26;&#x53f7;&#xff1a;+&#xff0c;-&#xff0c;*&#xff0c;/&#xff0c;%&#xff08;&#x6c42;&#x4f59;&#xff09;&#xff09;" VSHIFT="-48"/>
<node CREATED="1560674583373" HGAP="38" ID="Freemind_Link_1799816744" MODIFIED="1560675950169" TEXT="&#x81ea;&#x589e;&#x81ea;&#x51cf;&#x8fd0;&#x7b97;&#x7b26;&#xff0c;++&#xff0c;--&#xff0c;&#x6ce8;&#x610f;&#x81ea;&#x589e;&#x81ea;&#x51cf;&#x7b26;&#x7684;&#x4f4d;&#x7f6e;&#x6765;&#x786e;&#x5b9a;&#x6267;&#x884c;&#x987a;&#x5e8f;&#x7684;" VSHIFT="2"/>
<node CREATED="1560674743355" HGAP="40" ID="Freemind_Link_55396698" MODIFIED="1560675941041" TEXT="&#x5173;&#x7cfb;&#x8fd0;&#x7b97;&#x7b26;&#xff0c;&lt;&#xff0c;&gt;&#xff0c;&lt;=&#xff0c;&gt;=&#xff0c;==&#xff0c;!=" VSHIFT="46"/>
<node CREATED="1560675936442" HGAP="39" ID="Freemind_Link_1099161933" MODIFIED="1560676396078" TEXT="&#x903b;&#x8f91;&#x8fd0;&#x7b97;&#x7b26;&#xff0c;&amp;&amp;&#xff0c;||&#xff0c;           &#x79fb;&#x4f4d;&#x7b26;&#x300b;&#xff0c;&#x300a;&#xff0c;&gt;&gt;&gt;&#xff0c;" VSHIFT="32"/>
<node CREATED="1560674936537" HGAP="44" ID="Freemind_Link_1524275019" MODIFIED="1560676247184" TEXT="&#x4f4d;&#x8fd0;&#x7b97;&#x7b26;&#xff0c;&amp;&#xff08;&#x6309;&#x4f4d;&#x4e0e;&#xff09;&#xff0c;|&#xff08;&#x6309;&#x4f4d;&#x6216;&#xff09;&#xff0c;^(&#x6309;&#x4f4d;&#x5f02;&#x6216;)" VSHIFT="10"/>
</node>
<node CREATED="1560676482913" FOLDED="true" HGAP="73" ID="Freemind_Link_657340845" MODIFIED="1574841346397" TEXT="&#x6761;&#x4ef6;&#x8bed;&#x53e5;&#x4e0e;&#x5f00;&#x5173;&#x8bed;&#x53e5;" VSHIFT="-60">
<node CREATED="1560676502982" ID="Freemind_Link_633720769" MODIFIED="1560676575405" TEXT="if &#x4e0e;else"/>
<node CREATED="1560676507569" ID="Freemind_Link_1323517044" MODIFIED="1582082776492">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      switch()??case，1到1.8，参数可以是byte,short (这两个转换为int),int,char,enum,String
    </p>
    <p>
      2注意写break，只要没写break，就会把下面一直执行下去，哪怕下面不是对应的case，default也会执行
    </p>
    <p>
      3
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1560676639649" HGAP="73" ID="Freemind_Link_1905907669" MODIFIED="1560676829016" TEXT="&#x5faa;&#x73af;&#xff0c;for&#xff0c;do&#x3002;&#x3002;&#x3002;while&#xff0c;while&#xff0c;&#x6ce8;&#x610f;continue&#xff0c;&#x4e0e;break&#x7684;&#x533a;&#x522b;" VSHIFT="8">
<font NAME="SansSerif" SIZE="15"/>
</node>
<node CREATED="1569477552895" HGAP="70" ID="ID_1999632880" MODIFIED="1592704168147" VSHIFT="33">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#24322;&#24120;&#35821;&#21477;&#65292;try-catch-finally-return&#25191;&#34892;&#39034;&#24207;?<br />1&#12289;&#19981;&#31649;&#26159;&#21542;&#26377;&#24322;&#24120;&#20135;&#29983;&#65292;finally&#22359;&#20013;&#20195;&#30721;&#37117;&#20250;&#25191;&#34892;&#65292;&#38500;&#38750;&#20986;&#29616;exit&#65288;&#65289;<br />2&#12289;&#24403;try&#21644;catch&#20013;&#26377;return&#35821;&#21477;&#26102;&#65292;finally&#65288;&#27809;&#26377;return&#65289;&#22359;&#20173;&#28982;&#20250;&#25191;&#34892;&#65292;&#20294;&#26159;&#20250;return&#30340;&#20540;&#65292;&#19981;&#20250;&#34987;finally&#25913;&#21464;&#65292;&#35299;&#37322;&#35265;4<br />
    </p>
    <p>
      3&#12289;finally&#20013;&#20195;&#30721;&#25353;&#39034;&#24207;&#25191;&#34892;&#65292;&#30452;&#21040;return&#65292;return &#21518;&#19981;&#20250;&#25191;&#34892;<br />4&#12289;&#26412;&#36523;finally&#37324;&#30340;return &#65288;&#24322;&#24120;&#19968;&#26679;&#65289;&#20250;&#25226;&#20043;&#21069;try-catch&#37324;&#30340;&#35206;&#30422;&#65292;&#20934;&#30830;&#30340;&#35828;&#65292;&#22312;try-catch-finally&#20307;&#31995;&#37324;&#65292;&#20250;&#20808;&#25226;return &#35821;&#21477;&#26242;&#23384;&#21040;&#25351;&#23450;&#30340;&#22320;&#26041;&#65292;&#25918;&#32622;&#30340;&#26102;&#20505;&#20986;&#29616;&#24322;&#24120;catch&#20250;&#35206;&#30422;try&#65292;finally&#20250;&#35206;&#30422;&#21069;&#20004;&#20010;&#65292;&#22240;&#27492;finally&#20013;&#26368;&#22909;&#19981;&#35201;&#21253;&#21547;return
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1572797497902" ID="ID_454090638" MODIFIED="1572797738489" TEXT="&#x6570;&#x7ec4;&#xff0c;&#x521b;&#x5efa;&#x6570;&#x7ec4;&#x5bf9;&#x8c61;&#xff0c;&#x8fd8;&#x53ef;&#x4ee5;new int[]{1,2,3},&#x6ce8;&#x610f;forEach&#x5faa;&#x73af;&#xff0c;&#x662f;&#x4e34;&#x65f6;&#x53d8;&#x91cf;&#x6765;&#x5faa;&#x73af;&#x7684;&#xff0c;&#x5bf9;&#x8fd9;&#x4e2a;&#x4e34;&#x65f6;&#x53d8;&#x91cf;&#x8d4b;&#x503c;&#xff0c;&#x4e0d;&#x5f71;&#x54cd;&#x539f;&#x6570;&#x636e;"/>
</node>
<node CREATED="1560676844296" FOLDED="true" HGAP="97" ID="Freemind_Link_1464882982" MODIFIED="1585142553137" TEXT="&#x7c7b;&#x4e0e;&#x5bf9;&#x8c61;" VSHIFT="14">
<edge COLOR="#ff7400"/>
<node CREATED="1560686181845" FOLDED="true" ID="Freemind_Link_1636072336" MODIFIED="1580178481576" TEXT="&#x7c7b;&#x7684;&#x5185;&#x90e8;&#x7ec4;&#x6210;&#xff1a;&#x53d8;&#x91cf;&#x4e0e;&#x65b9;&#x6cd5;">
<node CREATED="1560686294028" ID="Freemind_Link_1750643028" MODIFIED="1560687481840" TEXT="&#x53d8;&#x91cf;&#xff0c;&#x5206;&#x6210;&#x5458;&#x53d8;&#x91cf;&#x4e0e;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff0c;&#x6210;&#x5458;&#x53d8;&#x91cf;&#x53ea;&#x80fd;&#x5728;&#x58f0;&#x660e;&#x65f6;&#x8d4b;&#x503c;&#xff0c;&#x4e0d;&#x80fd;&#x58f0;&#x660e;&#x4e4b;&#x540e;&#x5355;&#x72ec;&#x4e00;&#x884c;&#x8d4b;&#x503c;&#xff0c;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x53ea;&#x80fd;&#x5728;&#x58f0;&#x660e;&#x7684;&#x5c40;&#x90e8;&#x4f7f;&#x7528;" VSHIFT="-67"/>
<node CREATED="1560686568059" HGAP="25" ID="Freemind_Link_816686814" MODIFIED="1560687483440" TEXT="&#x6ce8;&#x610f;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4e0e;&#x6210;&#x5458;&#x53d8;&#x91cf;&#x91cd;&#x540d;&#xff0c;&#x6210;&#x5458;&#x53d8;&#x91cf;&#x88ab;&#x9690;&#x85cf;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;this&#x5173;&#x952e;&#x5b57;&#x89e3;&#x51b3;" VSHIFT="-33">
<arrowlink DESTINATION="Freemind_Link_816686814" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Freemind_Arrow_Link_641623967" STARTARROW="None" STARTINCLINATION="0;0;"/>
</node>
<node CREATED="1560686688796" ID="Freemind_Link_1928622156" MODIFIED="1572970267292">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      方法，相当于C语言函数，但是有重载与重写，重载是同一个方法名，不同参数，重写是将父类的方法改变，但是方法名字以及参数不变
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      同时还有构造方法，构造方法是和类名一样的方法，可以在新建对象分配地址时，加参数直接调用构造方法，<u><b>构造方法没有返回值，先初始化变量，再执行构造方法</b></u>
    </p>
    <p>
      
    </p>
    <p>
      本来还有类方法与实例方法，类变量，实例变量的，区别是有误static关键字，有就是类方法，类方法可以直接使用，也是先运行的。。。
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1560687720627" ID="Freemind_Link_1078606103" MODIFIED="1591961330092">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#26041;&#27861;&#20256;&#21442;&#65292;&#38500;&#20102;&#22266;&#23450;&#30340;&#21442;&#25968;&#22806;&#65292;java&#25903;&#25345;&#21442;&#25968;&#20010;&#25968;&#19981;&#30830;&#23450;&#30340;&#24773;&#20917;&#65292;void f(int ... x),x&#26159;&#21487;&#21464;&#21442;&#25968;&#30340;&#20195;&#34920;&#65292;&#27880;&#24847;&#21442;&#25968;&#21482;&#26159;&#24418;&#21442;&#65292;&#19981;&#20250;&#24433;&#21709;&#21407;&#26469;&#30340;&#21464;&#37327;&#65292;&#21442;&#25968;&#26412;&#36523;&#31867;&#20284;&#25968;&#32452;&#65292;&#25152;&#20197;&#37117;&#26159;&#19968;&#31181;&#31867;&#22411;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1560688372695" ID="Freemind_Link_1499283761" MODIFIED="1592704374064">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#35775;&#38382;&#26435;&#38480;&#65292;private&#65292;&#21482;&#33021;&#22312;&#26412;&#31867;&#20013;&#21019;&#24314;&#26412;&#31867;&#23545;&#35937;&#26102;&#25165;&#33021;&#35775;&#38382;&#26412;&#31867;&#21464;&#37327;&#19982;&#26041;&#27861;
    </p>
    <p>
      public&#26159;&#37117;&#21487;&#20197;&#35775;&#38382;
    </p>
    <p>
      
    </p>
    <p>
      protected&#26159;&#26412;&#21253;&#20197;&#21450;&#23376;&#31867;&#33021;&#35775;&#38382;&#65292;&#19981;&#33021;&#20462;&#39280;&#26222;&#36890;&#31867;&#65292;&#26410;&#21152;&#21069;&#38754;&#19977;&#20010;&#30340;&#26159;&#21483;&#21451;&#22909;&#26041;&#27861;/&#21464;&#37327;&#65292;&#26412;&#21253;&#35775;&#38382;
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1580178492215" ID="ID_36469869" MODIFIED="1580178498931" TEXT="&#x679a;&#x4e3e;&#x7c7b;">
<node CREATED="1580178503071" ID="ID_857192812" MODIFIED="1582039209516">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      /* 最基本的enum*/
    </p>
    <p>
      enum NumericEnums {
    </p>
    <p>
      ONE, TWO, THREE, FOUR, FIVE,
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1580178550960" ID="ID_626863500" MODIFIED="1580178665596" TEXT="/*   * &#x6784;&#x9020;&#x51fd;&#x6570;&#x548c;&#x81ea;&#x5b9a;&#x4e49;&#x65b9;&#x6cd5;   */   &#xa;enum ConstructableEnums {     &#xa;  ABC(10, &quot;abc&quot;), DEF(20, &quot;def&quot;), GHI(30, &quot;ghi&quot;), JKL(40, &quot;jkl&quot;);      &#xa; final int num;       &#xa;final String name;         &#xa; //&#x6784;&#x9020;&#x51fd;&#x6570;&#x9ed8;&#x8ba4;&#x662f;private&#xff0c;&#x4e5f;&#x53ea;&#x80fd;&#x662f;private&#x3002;&#x5176;&#x4ed6;&#x7684;&#x8bdd;&#x4f1a;&#x7f16;&#x8bd1;&#x9519;&#x8bef;!       &#xa;ConstructableEnums(int _num, String _name) {       &#xa;    this.num = _num;          &#xa;    this.name = _name;     &#xa;  }         &#xa;&#xa; String getContent() {      &#xa;     return String.format(&quot;num=[%d], name=[%s]&quot;, num, name);      &#xa; &#xa;}&#xa;  }  "/>
</node>
</node>
<node CREATED="1569386128879" HGAP="102" ID="ID_278574975" MODIFIED="1585142573755" TEXT="&#x5173;&#x952e;&#x5b57;" VSHIFT="85">
<node CREATED="1569386143535" ID="ID_839165391" MODIFIED="1569386240000" TEXT="final,finally,finalize">
<node CREATED="1569386257023" ID="ID_184187968" MODIFIED="1582902785184">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      final
    </p>
    <p>
      用于类表示不可继承
    </p>
    <p>
      
    </p>
    <p>
      用于方法表示不可重写，但可以重载
    </p>
    <p>
      
    </p>
    <p>
      用于变量，不可变只是引用不可变，（如果内容有改变方法，内容可变）以及基本数据不可变（因为string特性，所以内容也不会变），用于类，方法表示不可继承重写<br/><br/>finally，try，catch，用于之后一定执行的语句，常用于资源释放
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1569386432106" ID="ID_1965755445" MODIFIED="1591961962721" TEXT="finalize&#x662f;&#x5bf9;&#x8c61;&#x56de;&#x6536;&#x524d;&#x6267;&#x884c;&#x7684;&#x65b9;&#x6cd5;&#xff0c;&#x6267;&#x884c;&#x540e;&#x8868;&#x793a;&#x53ef;&#x56de;&#x6536;"/>
</node>
<node CREATED="1569773651062" ID="ID_1660882558" MODIFIED="1569773658750" TEXT="static">
<node CREATED="1569773719240" HGAP="34" ID="ID_627757757" MODIFIED="1592704646041" VSHIFT="-57">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      1&#29992;&#20110;&#20462;&#39280;&#26041;&#27861;&#65292;&#21464;&#37327;&#65292;&#21483;&#38745;&#24577;&#26041;&#27861;&#65292;&#21464;&#37327;&#65292;&#38745;&#24577;&#26041;&#27861;&#65292;&#38745;&#24577;&#21464;&#37327;&#37117;&#26159;&#21487;&#20197;&#19981;&#23454;&#20363;&#21270;&#23601;&#21487;&#20197;&#35843;&#29992;&#30340;<br /><br />2&#20462;&#39280;&#21021;&#22987;&#21270;&#22359;&#65292;&#27492;&#26102;&#21483;&#20570;&#38745;&#24577;&#21021;&#22987;&#21270;&#22359;&#25110;&#32773;static&#26041;&#27861;&#65292;&#27809;&#21483;&#38745;&#24577;&#26041;&#27861;&#21704;&#65292;&#24314;&#35758;&#21483;&#21069;&#19968;&#20010;&#65288;&#21482;&#22312;&#31867;&#21152;&#36733;&#26102;&#25191;&#34892;&#19968;&#27425;&#65289;
    </p>
    <p>
      &#20808;&#35299;&#37322;&#26222;&#36890;&#22987;&#21270;&#22359;&#65292;&#26412;&#36523;&#23601;&#26159;&#30452;&#25509;&#19968;&#20010;&#25324;&#21495;&#25324;&#36215;&#26469;&#30340;&#20195;&#30721;&#22359;&#65292;&#27809;&#26377;&#26041;&#27861;&#21517;&#65292;&#27809;&#26377;&#36820;&#22238;&#31867;&#22411;&#65292;&#27809;&#26377;public&#36825;&#20123;&#20462;&#39280;&#35789;&#65292;&#20160;&#20040;&#37117;&#27809;&#26377;&#65292;Java&#32534;&#35793;&#22120;&#23558;&#21021;&#22987;&#21270;&#31243;&#24207;&#22359;&#22797;&#21046;&#21040;&#27599;&#20010;&#26500;&#36896;&#20989;&#25968;&#20013;&#65292;&#19988;&#22788;&#20110;&#31532;&#19968;&#34892;&#12290;&#23601;&#26159;&#27599;&#27425;&#21019;&#24314;&#23545;&#35937;&#37117;&#25191;&#34892;&#19968;&#27425;&#12290;
    </p>
    <p>
      &#24403;&#28982;&#29238;&#31867;&#26500;&#36896;&#26041;&#27861;&#20808;&#20110;&#21021;&#22987;&#21270;&#22359;&#35843;&#29992;(new A();)
    </p>
    <p>
      &#31616;&#21333;&#30340;&#35828;&#65306;&#20808;&#38745;&#24577;&#21021;&#22987;&#21270;&#22359;&#65288;&#20294;&#26159;&#21482;&#25191;&#34892;&#19968;&#27425;&#65289;&#65292;&#20877;&#26222;&#36890;&#21021;&#22987;&#21270;&#22359;&#65292;&#26368;&#21518;&#35843;&#29992;&#26500;&#36896;&#26041;&#27861;<br /><br />
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1582858941214" ID="Freemind_Link_1860022767" MODIFIED="1582859027931" TEXT="&#x9759;&#x6001;&#x65b9;&#x6cd5;sleep()&#xff0c;&#x548c;&#x7ebf;&#x7a0b;&#x5bf9;&#x8c61;&#x662f;&#x65e0;&#x5173;&#x7684;&#xff0c;&#x5728;&#x54ea;&#x4e2a;&#x7ebf;&#x7a0b;&#x8c03;&#x7528;&#x5c31;&#x662f;&#x54ea;&#x4e2a;&#x6c89;&#x7761;&#xff0c;&#x4e0d;&#x662f;&#x65b0;&#x5efa;&#x7684;&#x7ebf;&#x7a0b;&#x6c89;&#x7761;"/>
<node CREATED="1612578097841" ID="Freemind_Link_1038218659" MODIFIED="1612578104914">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      java&#22312;&#32534;&#35793;&#26102;&#19981;&#20250;&#20026;&#38745;&#24577;&#21464;&#37327;&#20998;&#37197;&#31354;&#38388;&#65292;&#21482;&#20250;&#21019;&#24314;&#29983;&#25104;&#38745;&#24577;&#21464;&#37327;&#21644;&#21152;&#36733;&#38745;&#24577;&#21464;&#37327;&#30340;&#25351;&#20196; &#38745;&#24577;&#21464;&#37327;&#21019;&#24314;&#65292;&#38745;&#24577;&#22359;&#65288;&#21464;&#37327;&#20540;&#35201;&#30475;&#38745;&#24577;&#21464;&#37327;&#21644;&#38745;&#24577;&#22359;&#39034;&#24207;&#65289;&#12299;&#21464;&#37327;&#12299;&#21021;&#22987;&#21270;&#22359;&#12299;&#26500;&#36896;&#22120;&#160;&#160;&#30001;&#20110;&#30003;&#35831;&#31354;&#38388;&#19982;&#36171;&#20540;&#35828;&#20004;&#20010;&#27493;&#39588;&#65292;&#21464;&#37327;&#20250;&#22312;&#30003;&#35831;&#31354;&#38388;&#26102;&#20808;&#36171;&#40664;&#35748;&#20540;&#65292;&#20043;&#21518;&#36827;&#34892;&#36171;&#20540;&#65292; &#38745;&#24577;&#21464;&#37327;&#19982;&#38745;&#24577;&#22359;&#23433;&#35013;&#23450;&#20041;&#39034;&#24207;&#25191;&#34892;&#65292;&#27604;&#22914;&#160;&#160;&#160;&#160;&#160;static int count = 2;&#160;&#160;&#160;&#160;&#160;&#160;&#160;static {&#160;&#160;count = 1;&#160;&#160;}&#160;&#160;&#160;&#23454;&#38469;&#25805;&#20570;&#26159;&#65292;&#23450;&#20041; count=&gt;count=2=&gt;count=1&#160;&#160;&#160;&#160;&#160;static {&#160;&#160;count = 1;&#160;&#160;}&#160;&#160;&#160;&#160;&#160;&#160;static int count = 2;&#160;&#160;&#160;&#160;&#23454;&#38469;&#26159;&#65292;&#23450;&#20041; count=&gt;count=1=&gt;count=2
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</node>
<node CREATED="1571400476299" ID="ID_1053802488" MODIFIED="1571494893021" TEXT="synchronized">
<node CREATED="1571400489934" HGAP="29" ID="ID_1301630158" MODIFIED="1591962636579" VSHIFT="32">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      1）当多个并发线程访问同一个对象的同步代码块时，一段时间内只能有一个线程得到执行，其他线程必须等待当前线程执行完代码块后再执行代码；??<br/>2) 当一个线程访问一个对象的同步代码块时，其他线程可以访问该对象的中的非同步代码块；<br/>?3) 当一个线程访问一个对象的同步代码块时，其他线程对该对象中的所有同步代码块均不能访问；
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572882370132" ID="ID_1880276040" MODIFIED="1572882514838" TEXT="import static&#xff0c;&#x53ef;&#x4ee5;&#x5f15;&#x5165;&#x9759;&#x6001;&#x53d8;&#x91cf;&#x4e0e;&#x65b9;&#x6cd5;&#xff0c;&#x53ef;&#x4ee5;&#x5f15;&#x5165;&#x5168;&#x90e8;&#x4ea6;&#x53ef;&#x5355;&#x4e00;"/>
<node CREATED="1572951456433" ID="ID_249999739" MODIFIED="1572951471406" TEXT="instanceof  &#x5224;&#x65ad;&#x662f;&#x5426;&#x5b9e;&#x4f8b;"/>
</node>
<node CREATED="1560689419325" FOLDED="true" HGAP="111" ID="Freemind_Link_326850751" MODIFIED="1585187119434" TEXT="&#x7ee7;&#x627f;&#x4e0e;&#x63a5;&#x53e3;" VSHIFT="102">
<edge COLOR="#6bba70"/>
<node CREATED="1560690102989" HGAP="39" ID="Freemind_Link_1528922545" MODIFIED="1561453692243" VSHIFT="-129">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      继承，extends ，能多层继承，但不能多个继承，同时注意父类的变量方法修饰词，private不能继承，protected，public能继承，
    </p>
    <p>
      但是不在一个包，不能继承友好方法与友好变量，
    </p>
    <p>
      无论什么情况都不能继承构造方法，构造方法要用super调用
    </p>
    <p>
      多态：子类对继承的方法不同的重写就叫多态
    </p>
    <p>
      继承可以对public这些修饰做更改，但是只能往大了调
    </p>
    <p>
      有了final修饰,不允许重写，也就无法继承
    </p>
  </body>
</html></richcontent>
<node CREATED="1592648197016" FOLDED="true" ID="Freemind_Link_93889645" MODIFIED="1592648212456" TEXT="&#x7c7b;&#x52a0;&#x8f7d;&#x6267;&#x884c;&#x64cd;&#x4f5c;&#x987a;&#x5e8f;">
<edge COLOR="#4096ee"/>
<node CREATED="1592648218904" ID="Freemind_Link_353763299" MODIFIED="1592648383582">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      (1) &#29238;&#31867;&#38745;&#24577;&#23545;&#35937;&#65292;&#28982;&#21518;&#38745;&#24577;&#20195;&#30721;&#22359;
    </p>
    <p>
      (2) &#23376;&#31867;&#38745;&#24577;&#23545;&#35937;&#65292;&#28982;&#21518;&#38745;&#24577;&#20195;&#30721;&#22359;
    </p>
    <p>
      (3) &#29238;&#31867;&#38750;&#38745;&#24577;&#23545;&#35937;&#21644;&#38750;&#38745;&#24577;&#20195;&#30721;&#22359;
    </p>
    <p>
      (4) &#29238;&#31867;&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      (5) &#23376;&#31867; &#38750;&#38745;&#24577;&#23545;&#35937;&#21644;&#38750;&#38745;&#24577;&#20195;&#30721;&#22359;
    </p>
    <p>
      (6) &#23376;&#31867;&#26500;&#36896;&#20989;&#25968; &#20854;&#20013;&#65306;&#31867;&#20013;&#38745;&#24577;&#22359;&#25353;&#29031;&#22768;&#26126;&#39034;&#24207;&#25191;&#34892;&#65292;
    </p>
    <p>
      &#24182;&#19988;(1)&#21644;(2)&#19981;&#38656;&#35201;&#35843;&#29992;new&#31867;&#23454;&#20363;&#30340;&#26102;&#20505;&#23601;&#25191;&#34892;&#20102;(&#24847;&#24605;&#23601;&#26159;&#22312;&#31867;&#21152;&#36733;&#21040;&#26041;&#27861;&#21306;&#30340;&#26102;&#20505;&#25191;&#34892;&#30340;)
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</node>
<node CREATED="1569330156775" HGAP="65" ID="ID_468211524" MODIFIED="1569330169742" TEXT="super&#x5173;&#x952e;&#x5b57;" VSHIFT="-101">
<node CREATED="1569330174071" ID="ID_1141283009" MODIFIED="1569332405854" TEXT="super&#x8c03;&#x7528;&#x65b9;&#x6cd5;&#x6216;&#x53d8;&#x91cf;&#xff0c;super.&#x65b9;&#x6cd5;&#x540d;/&#x53d8;&#x91cf;&#x540d;"/>
<node CREATED="1569332437212" ID="ID_1428097387" MODIFIED="1592705333128">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#26500;&#36896;&#26041;&#27861;&#20351;&#29992;super&#65292;&#23376;&#31867;&#30340;&#26500;&#36896;&#20989;&#25968;&#40664;&#35748;&#31532;&#19968;&#34892;&#20250;&#40664;&#35748;&#35843;&#29992;&#29238;&#31867;&#26080;&#21442;&#30340;&#26500;&#36896;&#20989;&#25968;&#65292;&#19981;&#20250;&#30452;&#25509;&#20889;&#20986;&#26469;&#65292;&#36825;&#23601;&#26159;&#38544;&#24335;&#35821;&#21477;&#65292;&#20134;&#21487;&#26174;&#24335;&#35843;&#29992;&#65292;&#22312;&#23376;&#31867;&#26500;&#36896;&#26041;&#27861;&#31532;&#19968;&#25490;&#21152;super();&#27880;&#24847;&#29238;&#31867;&#27809;&#26377;&#26080;&#21442;&#26500;&#36896;&#20989;&#25968;&#26102;&#24517;&#39035;&#26174;&#24335;&#35843;&#29992;&#29238;&#31867;&#30340;&#65292;&#26377;&#21442;&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      super&#65288;&#65289;&#65292;&#25324;&#21495;&#37324;&#21487;&#20197;&#26377;&#21442;&#25968;&#65292;&#37027;&#23601;&#26159;&#35843;&#29992;&#26377;&#21442;&#25968;&#30340;&#37027;&#20010;&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      <font color="rgb(77, 77, 77)" face="Microsoft YaHei,SF Pro Display,Roboto,Noto,Arial,PingFang SC,sans-serif">&#26500;&#36896;&#26041;&#27861;&#20013;this()&#21644;super()&#19981;&#33021;&#20849;&#23384;&#65292;&#22240;&#20026;&#37117;&#38656;&#35201;&#25918;&#21040;&#31532;&#19968;&#34892;,&#20294;&#26159;this.&#23646;&#24615;&#21487;&#20197;&#25918;&#22312;super&#65288;&#65289;&#19979;&#38754;</font>
    </p>
  </body>
</html>
</richcontent>
<arrowlink DESTINATION="ID_1428097387" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_63192300" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1428097387" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_48153076" STARTARROW="None" STARTINCLINATION="0;0;"/>
</node>
</node>
<node CREATED="1560694971442" HGAP="58" ID="Freemind_Link_1618010153" MODIFIED="1582102839045" VSHIFT="-66">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      抽象类，添加abstract修饰
    </p>
    <p>
      有
    </p>
    <p>
      1抽象方法，添加abstract修饰，抽象方法不能自身实现，需要子类实现，子类还是抽象类的话，可以重写此方法也可以继承
    </p>
    <p>
      2普通方法，
    </p>
    <p>
      3成员可以是变量，可以是常量
    </p>
    <p>
      
    </p>
    <p>
      抽象类与接口都不能实例化，只能指向一个子类实例
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1560695484460" ID="Freemind_Link_418284467" MODIFIED="1591964465814">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#25509;&#21475;&#65292;interface&#65292;implements&#65292;&#25509;&#21475;&#37324;&#26377;&#25277;&#35937;&#26041;&#27861;(public?abstract)&#21644;&#40664;&#35748;&#26041;&#27861;&#65292;&#25277;&#35937;&#26041;&#27861;&#19981;&#33021;&#23454;&#29616;&#65292;
    </p>
    <p>
      &#40664;&#35748;&#26041;&#27861;&#65292;&#28155;&#21152;default&#20462;&#39280;&#35789;&#30340;&#26041;&#27861;&#65292;&#21487;&#20197;&#26377;&#20855;&#20307;&#23454;&#29616;&#65292;&#65288;B&#32487;&#25215;A&#21518;&#65292;&#37325;&#20889;&#20854;&#40664;&#35748;&#26041;&#27861;&#65292;
    </p>
    <p>
      &#19968;&#20010;&#31867;&#23454;&#29616;A&#65292;B&#20004;&#20010;&#25509;&#21475;&#65292;&#21017;&#29992;b&#30340;&#65292;&#25353;&#29031;&#23376;&#20248;&#20808;&#21435;&#21028;&#26029;&#37325;&#20889;&#30340;&#26041;&#27861;&#65292;&#19981;&#33021;&#21028;&#26029;&#30340;&#35805;&#26174;&#31034;&#22768;&#26126;&#35843;&#29992;&#21738;&#20010;&#65289;
    </p>
    &#25104;&#21592;&#21464;&#37327;&#30340;&#40664;&#35748;&#20462;&#39280;&#31526;&#20026;&#65306;public static final

    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#25509;&#21475;&#22238;&#35843;&#65292;&#25226;&#23454;&#29616;&#20102;&#25509;&#21475;&#30340;&#31867;&#30340;&#23545;&#35937;&#36171;&#32473;&#25509;&#21475;&#65292;&#25509;&#21475;&#33021;&#35843;&#29992;&#20182;&#30340;&#26041;&#27861;
    </p>
    <p>
      
    </p>
    <p>
      &#19968;&#20010;&#25509;&#21475;&#20063;&#33021;&#32487;&#25215;&#21478;&#19968;&#20010;&#25509;&#21475;
    </p>
    <p>
      &#27880;&#24847;&#65292;1&#19968;&#33324;&#32780;&#35328;&#19968;&#20010;&#31867;&#32487;&#25215;&#20102;&#25509;&#21475;&#65292;&#23601;&#35201;&#25226;&#25152;&#26377;&#26041;&#27861;&#37325;&#20889;&#65292;&#38500;&#38750;&#20182;&#26159;&#25277;&#35937;&#31867;
    </p>
    <p>
      2&#25277;&#35937;&#31867;&#23454;&#29616;&#25509;&#21475;&#21518;&#65292;&#23601;&#31639;&#25277;&#35937;&#31867;&#23454;&#29616;&#20102;&#25509;&#21475;&#26041;&#27861;&#65292;&#23376;&#31867;&#37117;&#35201;&#23454;&#29616;&#25509;&#21475;&#26041;&#27861;
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1560736509660" FOLDED="true" HGAP="104" ID="Freemind_Link_907113940" MODIFIED="1585188598502" VSHIFT="91">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      内部类，匿名类与异常类
    </p>
  </body>
</html></richcontent>
<edge COLOR="#73880a"/>
<node CREATED="1560736995106" HGAP="21" ID="Freemind_Link_1304086902" MODIFIED="1592533849736" VSHIFT="-64">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#20869;&#37096;&#31867;&#65292;&#26412;&#36523;&#23601;&#26159;&#22312;&#19968;&#20010;&#31867;&#37324;&#38754;&#65292;&#20877;&#23450;&#20041;&#19968;&#20010;&#31867;&#65292;&#26412;&#36136;&#26159;&#22806;&#37096;&#31867;&#30340;&#25104;&#21592;&#21464;&#37327;&#65292;&#21487;&#20197;&#20351;&#29992;&#22806;&#37096;&#31867;&#30340;&#21464;&#37327;&#65292;&#24120;&#29992;&#20110;&#37325;&#20889;&#26041;&#27861;&#65292;&#20294;&#26159;&#23616;&#37096;&#20869;&#37096;&#31867;&#21644;&#21311;&#21517;&#20869;&#37096;&#31867;&#35775;&#38382;&#22806;&#37096;&#31867;&#30340;&#23616;&#37096;&#21464;&#37327;&#24517;&#39035;&#30001;final&#20462;&#39280;&#65292;java8&#24320;&#22987;&#65292;&#21487;&#20197;&#19981;&#21152;final&#20462;&#39280;&#31526;&#65292;&#30001;&#31995;&#32479;&#40664;&#35748;&#28155;&#21152;&#12290;java&#23558;&#36825;&#20010;&#21151;&#33021;&#31216;&#20026;&#65306;Effectively final &#21151;&#33021;&#12290;
    </p>
    <p>
      &#22914;&#26524;&#20351;&#29992;static&#20462;&#39280;&#65292;&#21487;&#20197;&#29992;&#20869;&#37096;&#31867;&#21019;&#24314;&#23545;&#35937;&#65292;&#20294;&#26159;&#36825;&#20010;&#20869;&#37096;&#31867;&#19981;&#33021;&#25805;&#20316;&#22806;&#37096;&#31867;&#30340;&#23454;&#20363;&#21464;&#37327;
    </p>
    <p>
      &#21464;&#37327;&#26041;&#27861;&#35775;&#38382;&#65306;<br />&#20869;&#37096;&#31867;&#35843;&#29992;&#22806;&#37096;&#31867;&#65292;&#31867;&#21517;.this.&#21464;&#37327;&#21517;&#65292;&#19981;&#24517;final&#65292;&#20294;&#26159;&#23616;&#37096;&#20869;&#37096;&#31867;&#21644;&#21311;&#21517;&#20869;&#37096;&#31867;&#35775;&#38382;&#22806;&#37096;&#31867;&#30340;&#21464;&#37327;&#24517;&#39035;&#30001;final&#20462;&#39280;
    </p>
    <p>
      
    </p>
    <p>
      &#22806;&#37096;&#31867;&#65292;&#35843;&#29992;&#20869;&#37096;&#31867;&#65292;&#30475;&#20869;&#37096;&#31867;&#26159;&#21542;&#38745;&#24577;&#31867;&#65292;&#38745;&#24577;&#21487;&#20197;&#30452;&#25509;new&#23454;&#20363;&#21270;&#65292;&#21542;&#21017;&#20808;&#23454;new&#22806;&#37096;&#31867;&#20877;&#23454;&#20363;&#21270;&#20869;new&#37096;&#31867;
    </p>
    <p>
      &#26041;&#27861;&#31867;&#20284;&#65292;&#37117;&#26159;&#21517;&#23383;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1572957536866" HGAP="26" ID="ID_185009004" MODIFIED="1572971753979" TEXT="&#x533f;&#x540d;&#x7c7b;&#xff0c;&#x5c31;&#x662f;&#x4e0d;&#x58f0;&#x660e;&#x5bf9;&#x8c61;&#xff0c;&#x76f4;&#x63a5;new,&#x5982; onclick(new a(){ &#x4ee3;&#x7801; })&#xff0c; new&#x540e;&#x9762;&#x7684;&#x53ef;&#x4ee5;&#x662f;&#x6784;&#x9020;&#x5668;&#xff08;&#x6784;&#x9020;&#x65b9;&#x6cd5;&#xff09;&#xff0c;&#x53ef;&#x4ee5;&#x662f;&#x63a5;&#x53e3;&#xff0c;&#x8fd9;&#x4e2a;new &#x662f;&#x5b50;&#x7c7b;&#xff0c;&#x53ef;&#x4ee5;&#x5b9e;&#x73b0;&#x6216;&#x91cd;&#x5199;&#x539f;&#x65b9;&#x6cd5;&#xa;&#xa;&#x4e3a;&#x63a5;&#x53e3;&#x6216;&#x8005;&#x62bd;&#x8c61;&#x7c7b;&#x65f6;&#xff0c;&#x8fd9;&#x4e2a;new &#x662f;&#x5b50;&#x7c7b;&#xff0c;&#x7ee7;&#x627f;&#x6216;&#x8005;&#x5b9e;&#x73b0;&#x4e86;&#x62bd;&#x8c61;&#x7c7b;&#x6216;&#x63a5;&#x53e3;&#xff0c;&#x8981;&#x5b9e;&#x73b0;&#x91cc;&#x9762;&#x7684;&#x62bd;&#x8c61;&#x65b9;&#x6cd5;&#xff0c;&#x533f;&#x540d;&#x7c7b;&#x6ca1;&#x6709;&#x7c7b;&#x540d;&#xff0c;&#x6545;&#x672c;&#x8eab;&#x65e0;&#x6784;&#x9020;&#x65b9;&#x6cd5;&#xff0c;&#x4f46;&#x662f;&#x53ef;&#x4ee5;&#x7528;&#x521d;&#x59cb;&#x5316;&#x5757;&#x5b8c;&#x6210;&#x6784;&#x9020;&#x5668;&#x7684;&#x5de5;&#x4f5c;&#xa;&#xa;&#x666e;&#x901a;&#x7c7b;&#xff0c;&#x5373;&#x7c7b;&#x540e;&#x9762;&#x662f;&#x6784;&#x9020;&#x5668;&#xff08;&#x6784;&#x9020;&#x65b9;&#x6cd5;&#xff09;" VSHIFT="-56"/>
<node CREATED="1560738965997" ID="Freemind_Link_614411645" MODIFIED="1582104749285">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      异常类，将try -catch-finally语句运用的，在try中放可能出现异常的语句，在catch中处理异常，在finally中执行最后的代码，try与finally没有参数，catch（）里面是exception e,也可以是exception的子类，如IOException，亦可自定义异常类，继承exception类；
    </p>
    <p>
      
    </p>
    <p>
      catch里可以处理异常，亦可自己通过throw抛出异常，同时抛出的异常，可以以catch捕捉的异常为参数 throw new Exception(e),表示原本的异常
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      详解：1定义一个类，在这个类中的方法中规定什么时候抛出什么样的异常
    </p>
    <p>
      如 void f( int age) throws Exception{
    </p>
    <p>
      if( age&lt;0){
    </p>
    <p>
      throw new Exception();//可新建可以之前建立这个异常对象
    </p>
    <p>
      }
    </p>
    <p>
      }
    </p>
    <p>
      如果不抛出异常，那么调用此方法的会抛出异常
    </p>
    <p>
      
    </p>
    <p>
      2定义异常类，继承exception类，
    </p>
    <p>
      class A extends Exception{
    </p>
    <p>
      /*这个类继承了Exception的
    </p>
    <p>
      public string getmessage（），
    </p>
    <p>
      public string tostring（）
    </p>
    <p>
      public void printStackTrace(),这个打印出现异常的位置与原因
    </p>
    <p>
      */
    </p>
    <p>
      只是了解原因的话，一般定义一个String message；在这个类的构造方法中操作这个变量，在tostring方法中返回这个值
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      3主类主函数运行
    </p>
    <p>
      try{运行可能会出现异常的代码，有些是java直接规定的代码，有些是自己定义throw 方法} catch（ A a）{//定义的异常类
    </p>
    <p>
      println(a.tostring())
    </p>
    <p>
      }
    </p>
    <p>
      4多重catch，子类先父类后，按照这个顺序排列完要捕获的异常
    </p>
    <p>
      
    </p>
    <p>
      5finally中的return或者异常会抑制（消灭）前面try或者catch块中的异常
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1560743726196" FOLDED="true" HGAP="101" ID="Freemind_Link_1418940097" MODIFIED="1585188601566" TEXT="&#x5e38;&#x7528;&#x7c7b;" VSHIFT="106">
<edge COLOR="#4096ee"/>
<node CREATED="1561445786691" FOLDED="true" HGAP="16" ID="ID_1338854968" MODIFIED="1574864422169" TEXT="object" VSHIFT="35">
<node CREATED="1561445795315" ID="ID_538617015" MODIFIED="1561445936098" TEXT="instenceof &#xff0c;&#x5224;&#x65ad;&#x5176;&#x5de6;&#x8fb9;&#x5bf9;&#x8c61;&#x662f;&#x5426;&#x4e3a;&#x5176;&#x53f3;&#x8fb9;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x8fd4;&#x56de;boolean&#xff1a;&#x5b9e;&#x4f8b; instanceof &#x7c7b;&#x540d;"/>
<node CREATED="1561452630344" ID="ID_612992461" MODIFIED="1569292876783" TEXT="Object&#x7c7b;&#x662f;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7684;&#x7c7b;&#xff0c;&#x662f;&#x6240;&#x6709;&#x7c7b;&#x7684;&#x7236;&#x7c7b;&#xff0c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x6ca1;&#x6709;&#x7528;extends&#x660e;&#x786e;&#x6307;&#x51fa;&#x7ee7;&#x627f;&#x4e8e;&#x67d0;&#x4e2a;&#x7c7b;&#xff0c;&#x90a3;&#x4e48;&#x5b83;&#x9ed8;&#x8ba4;&#x7ee7;&#x627f;Object&#x7c7b;&#x3002;&#xa;&#x8fd9;&#x91cc;&#x4e3b;&#x8981;&#x603b;&#x7ed3;Object&#x7c7b;&#x4e2d;&#x7684;&#x4e09;&#x4e2a;&#x5e38;&#x7528;&#x65b9;&#x6cd5;&#xff1a;&#xa;toString():&#x53d6;&#x5f97;&#x5bf9;&#x8c61;&#x4fe1;&#x606f;&#x7684;&#x65b9;&#x6cd5;,&#x4f46;&#x662f;&#x9ed8;&#x8ba4;&#x7684;&#x662f;&#x8f93;&#x51fa;&#x5730;&#x5740;&#xff0c;&#x6240;&#x4ee5;&#x5b50;&#x7c7b;&#x9700;&#x8981;&#x91cd;&#x5199;public string toString();&#xa;equals():&#x5224;&#x65ad;&#x5bf9;&#x8c61;&#x662f;&#x5426;&#x76f8;&#x7b49;&#xff0c;&#x56e0;&#x4e3a;&#x6bd4;&#x8f83;&#x7684;&#x8fd8;&#x662f;&#x5730;&#x5740;&#xff0c;&#x6240;&#x4ee5;&#x5fc5;&#x987b;&#x91cd;&#x5199;,&#xa;&#x57fa;&#x672c;&#x6570;&#x503c;&#x7c7b;&#x578b;&#x4e0e;&#x4ed6;&#x4eec;&#x7684;&#x5c01;&#x88c5;&#x7c7b;equals()&#x662f;&#x4f1a;&#x76f4;&#x63a5;&#x76f8;&#x7b49;&#x7684;&#xa;hashCode()&#xff1a;&#x8be5;&#x65b9;&#x6cd5;&#x7528;&#x6765;&#x8fd4;&#x56de;&#x5176;&#x6240;&#x5728;&#x5bf9;&#x8c61;&#x7684;&#x7269;&#x7406;&#x5730;&#x5740;&#xff08;&#x54c8;&#x5e0c;&#x7801;&#x503c;&#xff09;&#xff0c;&#x5e38;&#x4f1a;&#x548c;equals&#x65b9;&#x6cd5;&#x540c;&#x65f6;&#x91cd;&#x5199;&#xff0c;&#x786e;&#x4fdd;&#x76f8;&#x7b49;&#x7684;&#x4e24;&#x4e2a;&#x5bf9;&#x8c61;&#x62e5;&#x6709;&#x76f8;&#x540c;&#x7ed3;&#x679c;&#xa;&#x3000;protected Object clone() throws CloneNotSupportedException&#xa;&#x3000;&#x3000;&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x6bd4;&#x8f83;&#x7279;&#x6b8a;&#xff1a;&#xa;&#x3000;&#x3000;&#x9996;&#x5148;&#xff0c;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x7684;&#x7c7b;&#x5fc5;&#x987b;&#x5b9e;&#x73b0;java.lang.Cloneable&#x63a5;&#x53e3;&#xff0c;&#x5426;&#x5219;&#x4f1a;&#x629b;&#x51fa;CloneNotSupportedException&#x5f02;&#x5e38;&#x3002;&#xa;&#x3000;&#x3000;Cloneable&#x63a5;&#x53e3;&#x4e2d;&#x4e0d;&#x5305;&#x542b;&#x4efb;&#x4f55;&#x65b9;&#x6cd5;&#xff0c;&#x6240;&#x4ee5;&#x5b9e;&#x73b0;&#x5b83;&#x65f6;&#x53ea;&#x8981;&#x5728;&#x7c7b;&#x58f0;&#x660e;&#x4e2d;&#x52a0;&#x4e0a;implements&#x8bed;&#x53e5;&#x5373;&#x53ef;&#x3002;&#xa;&#xa;&#x3000;&#x3000;&#x7b2c;&#x4e8c;&#x4e2a;&#x6bd4;&#x8f83;&#x7279;&#x6b8a;&#x7684;&#x5730;&#x65b9;&#x5728;&#x4e8e;&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;protected&#x4fee;&#x9970;&#x7684;&#xff0c;&#x8986;&#x5199;clone()&#x65b9;&#x6cd5;&#x7684;&#x65f6;&#x5019;&#x9700;&#x8981;&#x5199;&#x6210;public&#xff0c;&#x624d;&#x80fd;&#x8ba9;&#x7c7b;&#x5916;&#x90e8;&#x7684;&#x4ee3;&#x7801;&#x8c03;&#x7528;&#x3002;&#xa;&#xa;&#xa;getclass().&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;&#x7528;&#x6765;&#x53d6;&#x5f97;&#x8be5;&#x7c7b;&#x5df2;&#x7ecf;&#x88ab;&#x5b9e;&#x4f8b;&#x5316;&#x4e86;&#x7684;&#x5bf9;&#x8c61;&#x7684;&#x8be5;&#x7c7b;&#x7684;&#x5f15;&#x7528;"/>
<node CREATED="1564650727867" ID="ID_875301062" MODIFIED="1564650727867" TEXT=""/>
</node>
<node CREATED="1561390675212" ID="ID_1317429100" MODIFIED="1569479767235" TEXT="&#x94fe;&#x8868;">
<node CREATED="1561390804978" ID="ID_477949769" MODIFIED="1561390845692" TEXT="&#x7ebf;&#x7a0b;&#x5b89;&#x5168;&#x6027;&#xff1a;linkedlist,Arraylist&#x7ebf;&#x7a0b;&#x4e0d;&#x5b89;&#x5168;&#xff0c;vector&#x5b89;&#x5168;">
<node CREATED="1561444834316" ID="ID_51551577" MODIFIED="1561446299274">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      使用：ArrayList/Linkedlist/vector list=new??ArrayList/Linkedlist/vector (),泛型就加上去&lt;E&gt;,list.add(),用迭代器，或循环遍历，亦有删除的方法
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1561391045908" ID="ID_1136532296" MODIFIED="1561391059432" TEXT="ArrayList&#x548c;Vector&#x90fd;&#x662f;&#x4f7f;&#x7528;Object&#x7684;&#x6570;&#x7ec4;&#x5f62;&#x5f0f;&#x6765;&#x5b58;&#x50a8;&#x7684;&#xff0c;LinkedList&#x4f7f;&#x7528;&#x53cc;&#x5411;&#x94fe;&#x8868;&#x5b9e;&#x73b0;&#x5b58;&#x50a8;&#xff0c;&#x6309;&#x5e8f;&#x53f7;&#x7d22;&#x5f15;&#x6570;&#x636e;&#x9700;&#x8981;&#x8fdb;&#x884c;&#x5411;&#x524d;&#x6216;&#x5411;&#x540e;&#x904d;&#x5386;&#xff0c;&#x4f46;&#x662f;&#x63d2;&#x5165;&#x6570;&#x636e;&#x65f6;&#x53ea;&#x9700;&#x8981;&#x8bb0;&#x5f55;&#x672c;&#x9879;&#x524d;&#x540e;&#x9879;&#x5373;&#x53ef;&#xff0c;&#x63d2;&#x5165;&#x6570;&#x636e;&#x8f83;&#x5feb;&#x3002; &#x5bf9;&#x4e8e;&#x968f;&#x673a;&#x8bbf;&#x95ee;get&#x548c;set&#xff0c;ArrayList&#x89c9;&#x5f97;&#x4f18;&#x4e8e;LinkedList&#xff0c;&#x56e0;&#x4e3a;LinkedList&#x8981;&#x79fb;&#x52a8;&#x6307;&#x9488;&#x3002;&#xa0;&#x5bf9;&#x4e8e;&#x65b0;&#x589e;&#x548c;&#x5220;&#x9664;&#x64cd;&#x4f5c;add&#x548c;remove&#xff0c;LinedList&#x6bd4;&#x8f83;&#x5360;&#x4f18;&#x52bf;&#xff0c;&#x56e0;&#x4e3a;ArrayList&#x8981;&#x79fb;&#x52a8;&#x6570;&#x636e;&#x3002;&#xa0;"/>
</node>
<node CREATED="1560757014478" FOLDED="true" HGAP="19" ID="ID_766069179" MODIFIED="1585188945356" VSHIFT="-38">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      String类,字符串常量
    </p>
  </body>
</html></richcontent>
<node CREATED="1560757379286" ID="ID_1441258452" MODIFIED="1585189086758">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1用法 String s =new String（"字符串"）/（字符串变量a），亦可直接s="asd",区别是new会创建两个对象，一个字符串常量池里的字符串，一个是方法变量区里的对象（最终指向常量池），后面那个只会创建一个常量池里的字符串
    </p>
    <p>
      注意：string类一旦赋值后不会更改，每次对其进行操作都会产生新的引用，因此<strong style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(47, 47, 47); font-family: Georgia, Times New Roman, Times, Songti SC, serif; font-size: 16px; font-style: normal; letter-spacing: 0.544px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; background-color: rgb(255, 255, 255)"><font color="rgb(47, 47, 47)" face="Georgia, Times New Roman, Times, Songti SC, serif" size="16px">不要使用String类的"+"来进行频繁的拼接，注意创建一个string对象的时候，若初始值为null,在进行拼接时直接输出null+拼接的字符串</font></strong>
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1560757549398" ID="ID_997850041" MODIFIED="1560758352912">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2常用方法
    </p>
    <p>
      1）s.length(),返回字符串长度，一个int 值
    </p>
    <p>
      2）s.equals( string a),返回true false
    </p>
    <p>
      3）s.startsWith(string s),endsWith(string s),以s开头或结束
    </p>
    <p>
      4）s.compareTo(string s)，大于返回正数，等于返回0，小于返回负数
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1560758445195" ID="ID_895788218" MODIFIED="1560759089183">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      字符串与基本数据转化?
    </p>
    <p>
      1）int i= Integer.parseInt(string s)
    </p>
    <p>
      2）double d=Doule.parseDouble(string s)
    </p>
    <p>
      3)其他类似，parse+数据类型()
    </p>
    <p>
      注意大小写
    </p>
    <p>
      
    </p>
    <p>
      4）string s=String.valueOf(数据类型)
    </p>
    <p>
      s=String.toString(long i ,int p),字符串形式返回i的p进制数
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1560759205498" FOLDED="true" ID="ID_1548661923" MODIFIED="1574863209797" TEXT="StringBuffer&#x7c7b;&#xff0c;&#x5b57;&#x7b26;&#x4e32;&#x53d8;&#x91cf;&#xff0c;&#x7ebf;&#x7a0b;&#x5b89;&#x5168;">
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1076685714" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_906737776" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1962536180" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_609103964" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1975383729" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1891401712" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1906839979" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_1548661923" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_599530594" STARTARROW="None" STARTINCLINATION="0;0;"/>
<node CREATED="1560759350870" HGAP="18" ID="ID_723273920" MODIFIED="1560759943383" VSHIFT="-35">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1使用方式：StringBuffer??s =new StringBuffer(空/int a/string s)
    </p>
    <p>
      
    </p>
    <p>
      空则16个字符的初始容量，int a是a个字符串的大小，s都知道
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1560759939195" ID="ID_422986964" MODIFIED="1560761949959">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      常用方法
    </p>
    <p>
      1)s.append(),（）括号里面的值可以是多种类型，全部都会变成字符串追加到s中，返回新的s
    </p>
    <p>
      2）char charAt(int n),得到n 位置的单个字符，setCharAt(int n,char ch)设置n 位置的字符为ch，
    </p>
    <p>
      3）s.insert(int n ,string str),将str插入到n位置，返回新新的s
    </p>
    <p>
      4）s.reverse(),将s翻转，返回引用
    </p>
    <p>
      5）delete(int startIndex,int endindex),从start到end-1删除
    </p>
    <p>
      6）replace(int startIndex,int endindex,string str)从start到end-1,用str替换
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1561453995930" FOLDED="true" ID="ID_1611648274" MODIFIED="1574863224372" TEXT="StringBiluder&#xff0c;&#x5b57;&#x7b26;&#x4e32;&#x53d8;&#x91cf;&#xff0c;&#x975e;&#x7ebf;&#x7a0b;&#x5b89;&#x5168;">
<arrowlink DESTINATION="ID_1611648274" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1600538794" STARTARROW="None" STARTINCLINATION="0;0;"/>
<node CREATED="1561454883359" ID="ID_1981772416" MODIFIED="1561455486207" TEXT="&#x5982;&#x679c;&#x8981;&#x64cd;&#x4f5c;&#x5c11;&#x91cf;&#x7684;&#x6570;&#x636e;&#xff0c;&#x7528;String &#xff1b;&#x5355;&#x7ebf;&#x7a0b;&#x64cd;&#x4f5c;&#x5927;&#x91cf;&#x6570;&#x636e;&#xff0c;&#x7528;StringBuilder &#xff1b;&#x591a;&#x7ebf;&#x7a0b;&#x64cd;&#x4f5c;&#x5927;&#x91cf;&#x6570;&#x636e;&#xff0c;&#x7528;StringBuffer&#x3002;StringBuilder &#x76f8;&#x6bd4;&#x4f7f;&#x7528; StringBuffer &#x80fd;&#x83b7;&#x5f97; 10%~15% &#x5de6;&#x53f3;&#x7684;&#x6027;&#x80fd;&#x63d0;&#x5347;&#x3002;StringBuilder&#x53ef;&#x4ee5;&#x64cd;&#x4f5c;StringBuffer&#xff0c;&#x4f46;&#x662f;StringBuffer&#x4e0d;&#x53ef;&#x4ee5;&#x64cd;&#x4f5c;StringBuilder&#xff0c;&#xa;&#xa;&#xa;&#x5177;&#x4f53;&#x65b9;&#x6cd5;&#x548c;buffer&#x5dee;&#x4e0d;&#x591a;"/>
</node>
<node CREATED="1560762069036" FOLDED="true" ID="ID_30658988" MODIFIED="1567658691994" TEXT="Math">
<node CREATED="1560762162397" ID="ID_1223591446" MODIFIED="1560762859228">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      注意：所有参数都是double，返回的也是double
    </p>
    <p>
      abs(a)，a的绝对值
    </p>
    <p>
      max/min(a,b)，二者最大最小
    </p>
    <p>
      random(),产生一个0-1之间的随机数
    </p>
    <p>
      pow(a,b),a的b次幂
    </p>
    <p>
      sqrt(a)，a开根号
    </p>
    <p>
      log(a)，a的对数
    </p>
    <p>
      sin(a)a的正弦
    </p>
    <p>
      asin(a)，a的反正弦
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1569479773540" FOLDED="true" ID="ID_1666152831" MODIFIED="1574864482806" TEXT="&#x5f02;&#x5e38;&#x7c7b;">
<node CREATED="1569479782943" ID="ID_823152842" MODIFIED="1582109999748">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      Exception：<br/>?1．可以是可被控制(checked) 或不可控制的(unchecked，或者runtime)。?<br/>2．checked表示应该去捕获处理的，IOException<br/>3．Runtime如除数是0和数组下标越界等，若显示申明或者捕获将会对程序的运行效率影响很大。当然如果你有处理要求也可以显示捕获它们，像数组越界，空值异常
    </p>
    <p>
      <br/>
      <br/>
      Error：<br/>?1．大多与虚拟机相关，由虚拟机抛出，总是不可控制的(unchecked)。<br/>?2．经常用来用于表示系统错误或低层资源的错误。<br/>?3．一般不会去处理error，如果可能的话，应该在系统级被捕捉。
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1569849378937" ID="ID_1543365538" MODIFIED="1569851655745">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      异常类对应的就是异常，要处理异常就要捕获异常，
    </p>
    <p>
      1）捕获异常要从子类开始到父类乃至基类
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1561446811131" ID="ID_936082338" MODIFIED="1561446818684" TEXT="&#x65e5;&#x671f;&#x7c7b;">
<node CREATED="1561447204085" FOLDED="true" ID="ID_1217311669" MODIFIED="1567658697795" TEXT="date&#x7c7b;">
<node CREATED="1561447445004" ID="ID_156573383" MODIFIED="1561447506927" TEXT="&#x987a;&#x5e8f;&#xff1a;&#x661f;&#x671f;&#xff0c;&#x6708;&#xff0c;&#x65e5;&#xff0c;&#x5c0f;&#x65f6;&#xff0c;&#x5206;&#xff0c;&#x79d2;&#xff0c;&#x65f6;&#x533a;&#xff0c;&#x5e74;"/>
<node CREATED="1561448574430" ID="ID_539982947" MODIFIED="1561448604452" TEXT="&#x6784;&#x9020;&#x65b9;&#x6cd5;&#xff1a;&#xa;Date()           &#x5206;&#x914d; Date &#x5bf9;&#x8c61;&#x5e76;&#x7528;&#x5f53;&#x524d;&#x65f6;&#x95f4;&#x521d;&#x59cb;&#x5316;&#x6b64;&#x5bf9;&#x8c61;&#xff0c;&#x4ee5;&#x8868;&#x793a;&#x5206;&#x914d;&#x5b83;&#x7684;&#x65f6;&#x95f4;&#xff08;&#x7cbe;&#x786e;&#x5230;&#x6beb;&#x79d2;&#xff09;&#x3002;&#xa; Date(long date)           &#x5206;&#x914d; Date &#x5bf9;&#x8c61;&#x5e76;&#x521d;&#x59cb;&#x5316;&#x6b64;&#x5bf9;&#x8c61;&#xff0c;&#x4ee5;&#x8868;&#x793a;&#x81ea;&#x4ece;&#x6807;&#x51c6;&#x57fa;&#x51c6;&#x65f6;&#x95f4;&#xff08;&#x79f0;&#x4e3a;&#x201c;&#x5386;&#x5143;&#xff08;epoch&#xff09;&#x201d;&#xff0c;&#x5373; 1970 &#x5e74; 1 &#x6708; 1 &#x65e5; 00:00:00 GMT&#xff09;&#x4ee5;&#x6765;&#x7684;&#x6307;&#x5b9a;&#x6beb;&#x79d2;&#x6570;&#x3002; "/>
<node CREATED="1561449893069" ID="ID_969048630" MODIFIED="1561450259473" TEXT="date&#x7c7b;&#x7684;&#x65b9;&#x6cd5;&#x5927;&#x591a;&#x88ab;&#x53d6;&#x4ee3;&#x4e86;&#x53ea;&#x5269;&#x4e0b;&#xa;1&#xff09;boolean after(Date when):&#x6d4b;&#x8bd5;&#x8be5;&#x65e5;&#x671f;&#x662f;&#x5426;&#x5728;&#x6307;&#x5b9a;&#x65e5;&#x671f;when&#x4e4b;&#x540e;&#x3002;  &#xa;&#x2461;boolean before(Date when)&#xff1a;&#x6d4b;&#x8bd5;&#x8be5;&#x65e5;&#x671f;&#x662f;&#x5426;&#x5728;&#x6307;&#x5b9a;&#x65e5;&#x671f;when&#x4e4b;&#x524d;&#x3002;&#xa;  &#x2462;long getTime()&#xff1a;&#x8fd4;&#x56de;&#x8be5;&#x65f6;&#x95f4;&#x5bf9;&#x4e8e;&#x7684;long&#x578b;&#x6574;&#x6570;&#xff0c;&#x5373;&#x4ece;GMT 1970-01-01 00:00:00&#x4e4b;&#x95f4;&#x7684;&#x65f6;&#x95f4;&#x5dee;&#xff0c;&#x4ee5;&#x6beb;&#x79d2;&#x4f5c;&#x4e3a;&#x5355;&#x4f4d;&#x3002;  &#xa;&#x2463;void setTime(long time)&#xff1a;&#x8bbe;&#x7f6e;&#x8be5;Date&#x5bf9;&#x8c61;&#x7684;&#x4e8b;&#x4ef6;&#x3002; &#xa;&#xa;SimpleDateFormat&#x7c7b;&#xa;&#xa;&#x73b0;&#x5728;&#x4f7f;&#x7528;java.text.SimpleDateFormat&#x7c7b;&#x4e2d;&#x7684;&#x65b9;&#x6cd5;&#x3002;&#xa; Date d = new date();&#xa; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy&#x5e74;MM&#x6708;dd&#x65e5;&quot;);&#xa; System.out.println(sdf.format(d));&#xa;&#xa;">
<arrowlink DESTINATION="ID_969048630" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1828583363" STARTARROW="None" STARTINCLINATION="0;0;"/>
<arrowlink DESTINATION="ID_969048630" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1695031833" STARTARROW="None" STARTINCLINATION="0;0;"/>
</node>
</node>
<node CREATED="1561447216939" FOLDED="true" ID="ID_1485088926" MODIFIED="1563267691394" TEXT="calender&#x7c7b;">
<node CREATED="1561447703761" ID="ID_1004147721" MODIFIED="1561450911738" TEXT="Calendar  c=new  GregorianCalendar();//&#x65b0;&#x5efa;&#x65e5;&#x671f;&#x5bf9;&#x8c61;   &#xa;int  year=c.get(Calendar.YEAR);//&#x83b7;&#x53d6;&#x5e74;&#x4efd;  &#xa; int  month=c.get(Calendar.MONTH);//&#x83b7;&#x53d6;&#x6708;&#x4efd;  &#xa; int  day=c.get(Calendar.DATE);//&#x83b7;&#x53d6;&#x65e5;&#x671f;  &#xa; int  minute=c.get(Calendar.MINUTE);//&#x5206;  &#xa; int  hour=c.get(Calendar.HOUR);//&#x5c0f;&#x65f6; &#xa;  int  second=c.get(Calendar.SECOND);//&#x79d2;    &#xa;&#xa; Calendar&#x3000;new = Calendar.getInstanse();&#xa;&#xa;&#x53d6;&#x5c5e;&#x6027;&#x503c;&#xff1a;&#xa; Calendar.get(Calendar.MONTH); &#xa;&#x628a;&#x76f8;&#x8981;&#x7684;Date&#x8f6c;&#x6362;&#x6210;Calendar&#xa; Calendar c = Calendar.getInstance();&#xa; c.setTime(d);&#x3000;//&#x8f6c;&#x6362;&#xa; System.out.println(Calendar.MONTH);&#xa;&#xa;3.Timestamp(&#x65f6;&#x95f4;&#x6233;)&#x53d6;&#x65f6;&#x95f4;&#xa;&#x6709;getTimestamp()&#x65b9;&#x6cd5;&#xa;&#xa;Timestamp ts = rs.getTimestamp(&quot;pdate&quot;);&#xa;SimpleDateFormat sdf = new SimepleDateFormat(&quot;HH:mm:ss&quot;);&#xa;System.out.println(sdf.format(d));">
<node CREATED="1561451346102" ID="ID_1034031552" MODIFIED="1561451394185" TEXT="&#x65e5;&#x671f;&#x6570;&#x636e;&#x7684;&#x5b9a;&#x5236;&#x683c;&#x5f0f;&#xa;&#xa;&#x5047;&#x5982;&#x6211;&#x4eec;&#x5e0c;&#x671b;&#x5b9a;&#x5236;&#x65e5;&#x671f;&#x6570;&#x636e;&#x7684;&#x683c;&#x5f0f;, &#x6bd4;&#x65b9;&#x661f;&#x671f;&#x516d;-9&#x6708;-29&#x65e5;-2001&#x5e74;. &#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x4e86;&#x5982;&#x4f55;&#x5b8c;&#x6210;&#x8fd9;&#x4e2a;&#x5de5;&#x4f5c;:SimpleDateFormat bartDateFormat =  new SimpleDateFormat(&quot;EEEE-MMMM-dd-yyyy&quot;);  Date date = new Date();  System.out.println(bartDateFormat.format(date)); &#xa;&#xa;&#x53ea;&#x8981;&#x901a;&#x8fc7;&#x5411;SimpleDateFormat &#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4f20;&#x9012;&#x683c;&#x5f0f;&#x5b57;&#x7b26;&#x4e32;&quot;EEE-MMMM-dd-yyyy&quot;, &#x6211;&#x4eec;&#x5c31;&#x80fd;&#x591f;&#x6307;&#x660e;&#x81ea;&#x5df1;&#x60f3;&#x8981;&#x7684;&#x683c;&#x5f0f;. &#x4f60;&#x5e94;&#x8be5;&#x53ef;&#x4ee5;&#x770b;&#x89c1;, &#x683c;&#x5f0f;&#x5b57;&#x7b26;&#x4e32;&#x4e2d;&#x7684;ASCII &#x5b57;&#x7b26;&#x544a;&#x8bc9;&#x683c;&#x5f0f;&#x5316;&#x51fd;&#x6570;&#x4e0b;&#x9762;&#x663e;&#x793a;&#x65e5;&#x671f;&#xa;&#xa;&#x6570;&#x636e;&#x7684;&#x54ea;&#x4e00;&#x4e2a;&#x90e8;&#x5206;. EEEE&#x662f;&#x661f;&#x671f;, MMMM&#x662f;&#x6708;, dd&#x662f;&#x65e5;, yyyy&#x662f;&#x5e74;. &#x5b57;&#x7b26;&#x7684;&#x4e2a;&#x6570;&#x51b3;&#x5b9a;&#x4e86;&#x65e5;&#x671f;&#x662f;&#x5982;&#x4f55;&#x683c;&#x5f0f;&#x5316;&#x7684;.&#x4f20;&#x9012;&quot;EE-MM-dd-yy&quot;&#x4f1a;&#x663e;&#x793a; Sat-09-29-01. &#x8bf7;&#x5bdf;&#x770b;Sun &#x516c;&#x53f8;&#x7684;Web &#x7ad9;&#x70b9;&#x83b7;&#x53d6;&#x65e5;&#x671f;&#x683c;&#x5f0f;&#xa;&#xa;&#x5316;&#x9009;&#x9879;&#x7684;&#x5b8c;&#x6574;&#x7684;&#x6307;&#x793a;."/>
<node CREATED="1561451422173" ID="ID_1082004442" MODIFIED="1561452611207" TEXT="&#x5c06;&#x6587;&#x672c;&#x6570;&#x636e;&#x89e3;&#x6790;&#x6210;&#x65e5;&#x671f;&#x5bf9;&#x8c61;  &#xa;&#x5047;&#x8bbe;&#x6211;&#x4eec;&#x6709;&#x4e00;&#x4e2a;&#x6587;&#x672c;&#x5b57;&#x7b26;&#x4e32;&#x5305;&#x542b;&#x4e86;&#x4e00;&#x4e2a;&#x683c;&#x5f0f;&#x5316;&#x4e86;&#x7684;&#x65e5;&#x671f;&#x5bf9;&#x8c61;, &#x800c;&#x6211;&#x4eec;&#x5e0c;&#x671b;&#x89e3;&#x6790;&#x8fd9;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x5e76;&#x4ece;&#x6587;&#x672c;&#x65e5;&#x671f;&#x6570;&#x636e;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x65e5;&#x671f;&#x5bf9;&#x8c61;. &#xa;&#x6211;&#x4eec;&#x5c06;&#x518d;&#x6b21;&#x4ee5;&#x683c;&#x5f0f;&#x5316;&#x5b57;&#x7b26;&#x4e32;&quot;MM-dd-yyyy&quot; &#x8c03;&#x7528;  SimpleDateFormat&#x7c7b;, &#x4f46;&#x662f;&#x8fd9;&#x4e00;&#x6b21;, &#x6211;&#x4eec;&#x4f7f;&#x7528;&#x683c;&#x5f0f;&#x5316;&#x89e3;&#x6790;&#x800c;&#x4e0d;&#x662f;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x6587;&#x672c;&#x65e5;&#x671f;&#x6570;&#x636e;.&#xa; &#x6211;&#x4eec;&#x7684;&#x4f8b;&#x5b50;, &#x663e;&#x793a;&#x5728;&#x4e0b;&#x9762;, &#x5c06;&#x89e3;&#x6790;&#x6587;&#x672c;&#x5b57;&#x7b26;&#x4e32;&quot;9-29-2001&quot;&#x5e76;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x503c;&#x4e3a;001736000000 &#x7684;&#x65e5;&#x671f;&#x5bf9;&#x8c61;. &#xa;&#xa;&#xa; Create a date formatter that can parse dates of &#xa;// the form MM-dd-yyyy. &#xa;SimpleDateFormat bartDateFormat = &#xa;new SimpleDateFormat(&quot;MM-dd-yyyy&quot;);&#xa;&#xa;&#xa;// Create a string containing a text date to be parsed. &#xa;String dateStringToParse = &quot;9-29-2001&quot;;&#xa;&#xa;try { &#xa;// Parse the text version of the date. &#xa;// We have to perform the parse method in a &#xa;// try-catch construct in case dateStringToParse &#xa;// does not contain a date in the format we are expecting. &#xa;Date date = bartDateFormat.parse(dateStringToParse);&#xa;&#xa;// Now send the parsed date as a long value &#xa;// to the system output. &#xa;System.out.println(date.getTime()); &#xa;} &#xa;&#xa;catch (Exception ex) { &#xa;System.out.println(ex.getMessage()); &#xa;} "/>
</node>
</node>
</node>
</node>
<node CREATED="1561476909273" FOLDED="true" ID="ID_1921796578" MODIFIED="1585142696314" VSHIFT="87">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      线程，程序是一段静态的代码，进程是程序的一次执行过程，线程是进程的分解
    </p>
  </body>
</html></richcontent>
<node CREATED="1561479019536" HGAP="23" ID="ID_1766455422" MODIFIED="1592310688892" VSHIFT="-79">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      线程的状态：，新建、就绪（调用start方法后，就到就绪队列排队）、运行、阻塞、死亡。
    </p>
    <p>
      阻塞：原因
    </p>
    <p>
      1）jvm暂停当前线程的资源占用权，比如锁
    </p>
    <p>
      2）sleep（int a）,经过a毫秒后重新执行
    </p>
    <p>
      3）wait()方法，需要notify()唤醒
    </p>
    <p>
      4）执行某段代码时阻塞。如需要输入
    </p>
    <p>
      以及死亡，原因1是执行完了，2是强制暂停，run（）方法结束，强制暂停是stop()_会释放锁,suspend()-不会释放锁
    </p>
  </body>
</html></richcontent>
<arrowlink DESTINATION="ID_1766455422" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_139450143" STARTARROW="None" STARTINCLINATION="0;0;"/>
</node>
<node CREATED="1561538125156" FOLDED="true" HGAP="71" ID="ID_441327394" MODIFIED="1592310690322" VSHIFT="-69">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      常用方法，除了start（），sleep（），run（）方法――重写run方法，将所要执行的代码放置在此方法里
    </p>
    <p>
      还有，若是执行start（）,那么开辟新线程执行run()，也可以不执行start（），直接执行run()方法，不会开辟新线程，直接单线程按顺序执行
    </p>
    <p>
      0线程的命名除了构造方法直接加字符串外还有setname(string name)
    </p>
    <p>
      
    </p>
    <p>
      1isAlive(),当线程在执行时返回true，
    </p>
    <p>
      2currentThread()，可以直接Thread.c...d()，返回当前正在使用CPU资源的进程
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
<arrowlink DESTINATION="ID_441327394" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Arrow_ID_1732862098" STARTARROW="None" STARTINCLINATION="0;0;"/>
<node CREATED="1561545900641" HGAP="39" ID="ID_1423596897" MODIFIED="1582902649994" TEXT="public static void lockedClass() {&#xa;        synchronized (&#x672c;&#x7c7b;&#x7c7b;&#x540d;.class) {&#xa;            try {&#xa;            } catch (InterruptedException e) {           }        }    }&#xa;    // &#x9759;&#x6001;&#x65b9;&#x6cd5;&#x9501;&#xff0c;&#x5f53;&#x9501;&#x5b9a;static&#x53d8;&#x91cf;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x7531;&#x4e8e;static&#x53d8;&#x91cf;&#x53ea;&#x6709;&#x4e00;&#x4efd;&#x62f7;&#x8d1d;&#xff0c;&#x6240;&#x4ee5;&#x6b64;&#x65f6;&#x9501;&#x5b9a;&#x7684;&#x4e5f;&#x662f;&#x7c7b;&#x5bf9;&#x8c61;&#xff0c;&#x5373;&#x5b9e;&#x4f8b;&#xa;    public static synchronized void clsPrint1() {&#xa;        try {&#xa;        } catch (InterruptedException e) {        }   }&#xa;    public static synchronized void clsPrint2() {&#xa;        try {&#xa;        } catch (InterruptedException e) {       }   }&#xa;    //  &#x5bf9;&#x8c61;&#x65b9;&#x6cd5;&#x9501;&#xa;    public synchronized void objPrint1() {&#xa;        try {&#xa;        } catch (InterruptedException e) {&#xa;        }&#xa;    }&#xa;&#xa;&#x5b9e;&#x9645;&#x4e0a;&#xb7;&#xff0c;&#x4fee;&#x9970;&#x7ebf;&#x7a0b;A&#x8bbf;&#x95ee;&#x4ee5;&#x4e0a;&#x4efb;&#x610f;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x65f6;&#xff0c;&#x5176;&#x4ed6;&#x7ebf;&#x7a0b;&#x90fd;&#x4e0d;&#x80fd;&#x8bbf;&#x95ee;&#x6b64;&#x65b9;&#x6cd5;&#xff0c;&#x9664;&#x975e;&#x7b49;A&#x7ed3;&#x675f;" VSHIFT="-9"/>
<node CREATED="1582879634493" HGAP="57" ID="Freemind_Link_17333159" MODIFIED="1582902659258" VSHIFT="-28">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      3interrupt(),
    </p>
    <p>
      A)如果线程初一正常活动状态,那么会将该线程的中断标志设置为true.被设置中断标志的线程将继续中场运行,不受影响，注意是调用此方法的线程。
    </p>
    <p>
      B)如果线程处于被阻塞状态,（线程调用wait()、sleep()、join()等方法后处于阻塞状态）那么该线程将立即退出被阻塞状态，在调用前面三个方法的地方抛出interruptedException()，并且抛出后会清除掉Thread对象的中断状态。抛出异常后，在这三个方法后的代码继续执行，注意：不会使得线程吵醒到就绪队列执行。??
    </p>
    <p>
      
    </p>
    <p>
      当线程正在执行一些常规方法时，即便调用了interrupt方法也不会抛出InterruptedException，但会导致isInterrupted()方法返回true。
    </p>
    <p>
      
    </p>
    <p>
      注意，我们在编程的时候，线程在正常运行任务时,经常检查本线程的中断标志,如果被设置了中断标志就自行停止线程.
    </p>
    <div charset="utf-8">
      <div>
        <p>
          
        </p>
      </div>
    </div>
    <p>
      
    </p>
  </body>
</html></richcontent>
<arrowlink DESTINATION="Freemind_Link_17333159" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Freemind_Arrow_Link_301632536" STARTARROW="None" STARTINCLINATION="0;0;"/>
</node>
<node CREATED="1582879744920" HGAP="73" ID="Freemind_Link_1076109148" MODIFIED="1582902664728" VSHIFT="-42">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      4join，将调用此方法的线程与当前执行的线程合并，先执行此线程，在继续执行当前线程
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      5yeild(),让出资源，进入就绪队列排队，可以在类中的run（）方法调用，不用写类名，直接yeild()，给出了一个最大等待时间，如果超过给定时间目标线程还在执行，当前线程也会因为“等不及了”，而继续往下执行。
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1582879745930" FOLDED="true" HGAP="109" ID="Freemind_Link_1521945702" MODIFIED="1582902662617" VSHIFT="-267">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      6线程同步问题，
    </p>
    <p>
      1）synchronized修饰一个方法，表示此为同步方法，假如多个线程访问一个对象，线程A调用此方法时，其他所有线程都要等待此方法完成。
    </p>
    <p>
      修饰一个对象时，任意一个时刻只能有一个线程访问
    </p>
    <p>
      
    </p>
    <p>
      2）用法 A.public synchronized void add(String name)
    </p>
    <p>
      B.public void run() {//基本上在run方法写下面的，作用是锁定对象，实际上都是在锁定实例对象
    </p>
    <p>
      synchronized (this) {
    </p>
    <p>
      try { System.out.println("ok");
    </p>
    <p>
      Thread.sleep(100000);
    </p>
    <p>
      }
    </p>
    <p>
      catch (InterruptedException e) { e.printStackTrace(); }
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ??}
    </p>
  </body>
</html></richcontent>
<node CREATED="1561545900641" HGAP="59" ID="Freemind_Link_1828934261" MODIFIED="1582880554971" TEXT="public static void lockedClass() {&#xa;        synchronized (&#x672c;&#x7c7b;&#x7c7b;&#x540d;.class) {&#xa;            try {&#xa;            } catch (InterruptedException e) {           }        }    }&#xa;    // &#x9759;&#x6001;&#x65b9;&#x6cd5;&#x9501;&#xff0c;&#x5f53;&#x9501;&#x5b9a;static&#x53d8;&#x91cf;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x7531;&#x4e8e;static&#x53d8;&#x91cf;&#x53ea;&#x6709;&#x4e00;&#x4efd;&#x62f7;&#x8d1d;&#xff0c;&#x6240;&#x4ee5;&#x6b64;&#x65f6;&#x9501;&#x5b9a;&#x7684;&#x4e5f;&#x662f;&#x7c7b;&#x5bf9;&#x8c61;&#xff0c;&#x5373;&#x5b9e;&#x4f8b;&#xa;    public static synchronized void clsPrint1() {&#xa;        try {&#xa;        } catch (InterruptedException e) {        }   }&#xa;    public static synchronized void clsPrint2() {&#xa;        try {&#xa;        } catch (InterruptedException e) {       }   }&#xa;    //  &#x5bf9;&#x8c61;&#x65b9;&#x6cd5;&#x9501;&#xa;    public synchronized void objPrint1() {&#xa;        try {&#xa;        } catch (InterruptedException e) {&#xa;        }&#xa;    }&#xa;&#xa;&#x5b9e;&#x9645;&#x4e0a;&#xb7;&#xff0c;&#x4fee;&#x9970;&#x7ebf;&#x7a0b;A&#x8bbf;&#x95ee;&#x4ee5;&#x4e0a;&#x4efb;&#x610f;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x65f6;&#xff0c;&#x5176;&#x4ed6;&#x7ebf;&#x7a0b;&#x90fd;&#x4e0d;&#x80fd;&#x8bbf;&#x95ee;&#x6b64;&#x65b9;&#x6cd5;&#xff0c;&#x9664;&#x975e;&#x7b49;A&#x7ed3;&#x675f;" VSHIFT="-68"/>
</node>
<node CREATED="1582879746926" HGAP="109" ID="Freemind_Link_1860493182" MODIFIED="1582879789131" TEXT="" VSHIFT="37"/>
</node>
<node CREATED="1573487817694" HGAP="57" ID="ID_1645363350" MODIFIED="1592310695347" TEXT="&#x963b;&#x585e;&#x961f;&#x5217;" VSHIFT="-21">
<node CREATED="1573487833614" ID="ID_1629329180" MODIFIED="1573488025774" TEXT="&#x5728;&#x7ebf;&#x7a0b;&#x91cc;&#x901a;&#x8fc7;&#x65b0;&#x5efa;&#x963b;&#x585e;&#x961f;&#x5217;&#x5bf9;&#x8c61;&#xff0c;&#x6267;&#x884c;&#x5176;&#x4e2d;&#x65b9;&#x6cd5;&#xff0c;&#x7136;&#x540e;&#x6839;&#x636e;&#x6b64;&#x65b9;&#x6cd5;&#x6267;&#x884c;&#x7ed3;&#x679c;&#xff0c;&#x662f;&#x5426;&#x963b;&#x585e;"/>
</node>
<node CREATED="1561535364302" FOLDED="true" HGAP="5" ID="Freemind_Link_558757546" MODIFIED="1592310687163" VSHIFT="-8">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#32447;&#31243;&#30340;&#21019;&#24314;&#65306;
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1592107971367" ID="Freemind_Link_168227448" MODIFIED="1592107973074" TEXT="1&#xff09;&#x7ee7;&#x627f;Thread&#x7c7b;&#xff0c;&#x7ee7;&#x627f;&#x4e86;&#x5fc5;&#x987b;&#x8981;&#x91cd;&#x5199;public void run(),&#x5b50;&#x7c7b;Asd asd=new Asd();asd.start(); "/>
<node CREATED="1592107937095" ID="Freemind_Link_796688151" MODIFIED="1592108021466">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      2&#65289;&#23454;&#29616;runnable&#25509;&#21475;,&#23545;&#21516;&#19968;&#20010;&#36164;&#28304;&#25805;&#20316;&#26102;&#23601;&#29992;&#36825;&#20010; class Bank implements runnable(){
    </p>
    <p>
      }
    </p>
    <p>
      Bank b =new Bank();
    </p>
    <p>
      Thread th=new Thread(b)
    </p>
    <p>
      
    </p>
    <p>
      &#23454;&#38469;&#19978;&#26500;&#36896;&#26041;&#27861;&#36824;&#26377; Thread(Runnable target)
    </p>
    <p>
      Thread(Runnable target, String name)
    </p>
    <p>
      Thread(ThreadGroup group, Runnable target)
    </p>
    <p>
      Thread(ThreadGroup group, Runnable target, String name)
    </p>
    <p>
      Thread(ThreadGroup group, Runnable target, String name, long stackSize)&#160;&#160;
    </p>
    <p>
      &#23454;&#29616;&#20102;runnable&#30340;&#32447;&#31243;&#31867;&#21487;&#20197;&#22312;run&#65288;&#65289;&#26041;&#27861;&#37324;&#38754;&#21019;&#24314;&#26032;&#32447;&#31243;&#65292;&#21442;&#25968;&#26159;this&#20063;&#34892;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1592107885799" ID="Freemind_Link_742068213" MODIFIED="1592108091845">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      &#160;&#160;3&#65289;&#23454;&#29616;Callable&#25509;&#21475;&#65292;&#37325;&#20889;call&#65288;&#65289;&#26041;&#27861;&#65292;call()&#26041;&#27861;&#26377;&#36820;&#22238;&#20540;
    </p>
    <p>
      class ThreadDemo1 implements Callable&lt;Integer&gt; {&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;@Override&#160;&#160;&#160;&#160;&#160;public Integer call() throws Exception {&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      int sum = 0;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      for (int i = 0; i &lt;= 100; i++) {&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sum += 1;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      }&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;return sum;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      public static void main(String[] args) {
    </p>
    <p>
      ThreadDemo1 threadDemo1 = new ThreadDemo1();
    </p>
    <p>
      
    </p>
    <p>
      //1.&#25191;&#34892;Callable&#26041;&#24335;&#65292;&#38656;&#35201;FutureTask&#23454;&#29616;&#31867;&#30340;&#25903;&#25345;&#65292;&#29992;&#20110;&#25509;&#21463;&#36816;&#31639;&#32467;&#26524;&#12290;
    </p>
    <p>
      FutureTask&lt;Integer&gt; result = new FutureTask&lt;Integer&gt;(threadDemo1);
    </p>
    <p>
      
    </p>
    <p>
      new Thread(result).start();
    </p>
    <p>
      
    </p>
    <p>
      //2.&#25509;&#25910;&#32447;&#31243;&#36816;&#31639;&#21518;&#30340;&#32467;&#26524;
    </p>
    <p>
      try {
    </p>
    <p>
      Integer sum = result.get();//FutureTask&#20063;&#21487;&#29992;&#38381;&#38145;&#30340;&#25805;&#20316;
    </p>
    <p>
      System.out.println(sum);
    </p>
    <p>
      } catch (InterruptedException e) {
    </p>
    <p>
      e.printStackTrace();
    </p>
    <p>
      } catch (ExecutionException e) {
    </p>
    <p>
      e.printStackTrace();
    </p>
    <p>
      }
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</node>
<node CREATED="1573400627103" FOLDED="true" HGAP="30" ID="ID_818693906" MODIFIED="1585142694897" TEXT="&#x81ea;&#x5b9a;&#x4e49;&#x6ce8;&#x89e3;" VSHIFT="102">
<node CREATED="1573400645183" ID="ID_726712150" MODIFIED="1573442621762">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1介绍：注解定义后相当于关键字，可以在方法，类，接口上使用,jdk里有一些注解
    </p>
    <p>
      
    </p>
    <p>
      2定义：@interface 修饰接口 此注解接口里的内容和普通接口差不多，可以定义方法，变量，变量的话在使用注解的时候可以指定值
    </p>
    <p>
      如@Test（a="asd",b= 1）
    </p>
    <p>
      
    </p>
    <p>
      3使用
    </p>
    <p>
      在方法，类上加注解，然后要通过注解处理工具对这些加了注解的去处理，这些工具有配套的方法去提取信息，如AnnotatedElement接口定义了一些方法，去提取信息，实现类有class，method，package一般是通过反射去实现方法/类的调用，
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1573442627025" ID="ID_776563941" MODIFIED="1573442642922" TEXT="&#x4f5c;&#x7528;&#x5728;&#x5176;&#x4ed6;&#x6ce8;&#x89e3;&#x7684;&#x6ce8;&#x89e3;(&#x6216;&#x8005;&#x8bf4; &#x5143;&#x6ce8;&#x89e3;)&#x662f;:  &#xa;@Retention - &#x6807;&#x8bc6;&#x8fd9;&#x4e2a;&#x6ce8;&#x89e3;&#x600e;&#x4e48;&#x4fdd;&#x5b58;&#xff0c;&#x662f;&#x53ea;&#x5728;&#x4ee3;&#x7801;&#x4e2d;&#xff0c;&#x8fd8;&#x662f;&#x7f16;&#x5165;class&#x6587;&#x4ef6;&#x4e2d;&#xff0c;&#x6216;&#x8005;&#x662f;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x53cd;&#x5c04;&#x8bbf;&#x95ee;&#x3002; &#xa;@Documented - &#x6807;&#x8bb0;&#x8fd9;&#x4e9b;&#x6ce8;&#x89e3;&#x662f;&#x5426;&#x5305;&#x542b;&#x5728;&#x7528;&#x6237;&#x6587;&#x6863;&#x4e2d;&#x3002;&#xa; @Target - &#x6807;&#x8bb0;&#x8fd9;&#x4e2a;&#x6ce8;&#x89e3;&#x5e94;&#x8be5;&#x662f;&#x54ea;&#x79cd; Java &#x6210;&#x5458;&#x3002;&#xa; @Inherited - &#x6807;&#x8bb0;&#x8fd9;&#x4e2a;&#x6ce8;&#x89e3;&#x662f;&#x7ee7;&#x627f;&#x4e8e;&#x54ea;&#x4e2a;&#x6ce8;&#x89e3;&#x7c7b;(&#x9ed8;&#x8ba4; &#x6ce8;&#x89e3;&#x5e76;&#x6ca1;&#x6709;&#x7ee7;&#x627f;&#x4e8e;&#x4efb;&#x4f55;&#x5b50;&#x7c7b;) "/>
</node>
<node CREATED="1561391569489" FOLDED="true" HGAP="27" ID="Freemind_Link_15876341" MODIFIED="1573535262205" TEXT="&#x6570;&#x636e;&#x7ed3;&#x6784;&#x7684;&#x5206;&#x5c42;" VSHIFT="-35">
<node CREATED="1561391587273" ID="Freemind_Link_685850870" MODIFIED="1561391623547">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Collection 分成
    </p>
    <p>
      List? │LinkedList?│ArrayList?│Vector?│?Stack
    </p>
  </body>
</html></richcontent>
<node CREATED="1561444328638" ID="Freemind_Link_1680171963" MODIFIED="1561444356565" TEXT="Collection&lt;--List&lt;--Vector  Collection&lt;--List&lt;--ArrayList &#xa; Collection&lt;--List&lt;--LinkedList  Collection&lt;--Set&lt;--HashSet  &#xa;Collection&lt;--Set&lt;--HashSet&lt;--LinkedHashSet  &#xa;Collection&lt;--Set&lt;--SortedSet&lt;--TreeSet  &#xa;Map&lt;--SortedMap&lt;--TreeMap  Map&lt;--HashMap"/>
</node>
<node CREATED="1561391647663" FOLDED="true" ID="Freemind_Link_1530788702" MODIFIED="1573540164319">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Map?
    </p>
    <p>
      Hashtable?| HashMap? | WeakHashMap（都实现了map接口）
    </p>
  </body>
</html></richcontent>
<node CREATED="1561393262521" ID="Freemind_Link_664269635" MODIFIED="1573540129553" TEXT="&#x7ee7;&#x627f;&#x7c7b;&#x4e0d;&#x540c;&#xff1a; A.HashMap&#x7ee7;&#x627f;AbstractMap B.Hashtable&#x7ee7;&#x627f;Dictionary &#xa;2 &#x6267;&#x884c;&#x6548;&#x7387;&#x4e0d;&#x540c;&#xff1a; A.HashMap&#x662f;&#x975e;&#x7ebf;&#x7a0b;&#x5b89;&#x5168;&#x7684;&#xff0c;&#x662f;Hashtable&#x7684;&#x8f7b;&#x91cf;&#x7ea7;&#x5b9e;&#x73b0;&#xff0c;&#x6548;&#x7387;&#x8f83;&#x9ad8; B.Hashtable&#x662f;&#x7ebf;&#x7a0b;&#x5b89;&#x5168;&#x7684;&#xff0c;&#x6548;&#x7387;&#x8f83;&#x4f4e; &#xa;3 put&#x65b9;&#x6cd5;&#x5bf9;key&#x548c;value&#x7684;&#x8981;&#x6c42;&#x4e0d;&#x540c; A.HashMap&#x5141;&#x8bb8;Entry&#x7684;key&#x6216;value&#x4e3a;null &#xff0c;&#x4f46;&#x53ea;&#x80fd;&#x6709;&#x4e00;&#x4e2a;null &#xa;B.Hashtable&#x4e0d;&#x5141;&#x8bb8;Entry&#x7684;key&#x6216;value&#x4e3a;null&#xff0c;&#x5426;&#x5219;&#x51fa;&#x73b0;NullPointerException &#xa;4 &#x6709;&#x65e0;contains&#x65b9;&#x6cd5; A.HashMap&#x6ca1;&#x6709;contains&#x65b9;&#x6cd5;&#xff0c;&#xff08;&#x6539;&#x6210;&#x4e86;containskey/value&#xff09; B.Hashtable&#x6709;contains&#x65b9;&#x6cd5;&#xa;4hashtable &#xff0c;&#x9ed8;&#x8ba4;&#x503c;&#x662f;11&#xff0c;&#x6269;&#x5927;&#x662f;old*2+1.hashMap&#x7684;&#x9ed8;&#x8ba4;&#x503c;16&#xff0c;&#x6269;&#x5927;&#x662f;old*2&#xa;5hashmap&#xff0c;&#x5728;&#x6dfb;&#x52a0;&#x65b0;&#x7684;&#x952e;&#x503c;&#x5bf9;&#x7684;&#x65f6;&#x5019;&#xff0c;1&#x8ba1;&#x7b97;key&#x7684;hash&#x503c;&#xff0c;&#x67e5;&#x770b;&#x6b64;hash&#x503c;&#x51fa;&#x6709;&#x65e0;&#x5143;&#x7d20;&#xff0c;&#x6ca1;&#x6709;&#x5c31;&#x6dfb;&#x52a0;&#x5230;&#x8fd9;&#x4e2a;&#x4f4d;&#x7f6e;&#xff0c;&#x6709;&#x5c31;&#x8c03;&#x7528;key&#x7684;equals()&#x65b9;&#x6cd5;&#xff0c;&#x6bd4;&#x8f83;&#x4e24;&#x4e2a;key&#x662f;&#x5426;&#x76f8;&#x540c;&#xff0c;&#x76f8;&#x540c;&#x5219;&#x8986;&#x76d6;&#x539f;&#x6709;&#x503c;&#xff0c;&#x82e5;&#x4e0d;&#x540c;&#xff08;&#x6b64;&#x65f6;key&#x7684;hash&#x503c;&#x76f8;&#x540c;&#xff09;&#xff0c;&#x4ee3;&#x8868;&#x4ea7;&#x751f;&#x51b2;&#x7a81;&#xff0c;&#x6309;&#x7167;&#x4e00;&#x5b9a;&#x7684;&#x65b9;&#x6cd5;&#x89e3;&#x51b3;&#x51b2;&#x7a81;&#xff0c;&#x94fe;&#x5730;&#x5740;&#xff08;hashmap&#x672c;&#x8eab;&#x662f;&#x7528;&#x8fd9;&#x4e2a;&#xff09;&#xff0c;&#x5f00;&#x53d1;&#x5730;&#x5740;&#x6cd5;&#x7b49;&#xff0c;">
<node CREATED="1585708057981" ID="Freemind_Link_1905022108" MODIFIED="1585708060688" TEXT=" hashmap&#x5728;&#x952e;&#x503c;&#x5bf9;&gt;64&#x4e14;&#x94fe;&#x8868;&#x957f;&#x5ea6;&#x8fbe;&#x5230;8&#x65f6;&#xff0c;&#x8f6c;&#x4e3a;&#x7ea2;&#x9ed1;&#x6811;"/>
</node>
<node CREATED="1567598932703" ID="Freemind_Link_1037353149" MODIFIED="1570072688849" TEXT="Hashtable tab=new Hashtable();     &#xa;         tab.put(&quot;a&quot;, &quot;aaa&quot;);        &#xa;         tab.put(&quot;b&quot;, &quot;bbb&quot;);         &#xa;         tab.put(&quot;c&quot;, &quot;ccc&quot;);          &#xa;         tab.put(&quot;d&quot;, &quot;ddd&quot;);            &#xa;         Iterator iterator_1 = tab.keySet().iterator();         &#xa;         while (iterator_1.hasNext()) {       &#xa;         Object key = iterator_1.next();           &#xa;         System.out.println(&quot;tab.get(key) is :&quot;+tab.get(key));    &#xa;&#x6ce8;&#x610f;&#x5c31;&#x662f;&#x4f7f;&#x7528;&#x81ea;&#x5b9a;&#x4e49;&#x7684;&#x7c7b;&#x505a;&#x53ef;&#x4ee5;&#xff0c;&#x8981;&#x91cd;&#x5199;hashcode(),equals()&#x65b9;&#x6cd5;&#xff0c;&#x56e0;&#x4e3a;&#x7ee7;&#x627f;&#x81ea;object&#x7684;&#x4e24;&#x4e2a;&#x65b9;&#x6cd5;&#x90fd;&#x662f;&#x4f7f;&#x7528;&#x5730;&#x5740;&#x7684;&#xa;" VSHIFT="31"/>
</node>
<node CREATED="1561441745066" ID="Freemind_Link_1949200995" MODIFIED="1573540453856" TEXT="set&#xff0c;set&#x53ea;&#x5b58;&#x50a8;map&#x7684;key">
<arrowlink DESTINATION="Freemind_Link_1949200995" ENDARROW="Default" ENDINCLINATION="0;0;" ID="Freemind_Arrow_Link_1144988630" STARTARROW="None" STARTINCLINATION="0;0;"/>
<node CREATED="1561441770295" ID="Freemind_Link_1157203677" MODIFIED="1561443954002" TEXT="HashSet&#x91c7;&#x7528;&#x6563;&#x5217;&#x51fd;&#x6570;&#x5bf9;&#x5143;&#x7d20;&#x8fdb;&#x884c;&#x6392;&#x5e8f;&#xff0c;&#x662f;&#x4e13;&#x95e8;&#x4e3a;&#x5feb;&#x901f;&#x67e5;&#x8be2;&#x800c;&#x8bbe;&#x8ba1;&#x7684;&#x3002;&#x5b58;&#x5165;HashSet&#x7684;&#x5bf9;&#x8c61;&#x5fc5;&#x987b;&#x5b9a;&#x4e49;hashCode&#x65b9;&#x6cd5;&#x3002;&#xff08;&#x4e0d;&#x4f1a;&#x6dfb;&#x52a0;&#x91cd;&#x590d;&#x7684;&#x5143;&#x7d20;&#xff0c;&#x81ea;&#x7136;&#x6392;&#x5e8f;&#xff0c;&#x53ef;&#x4ee5;&#x6dfb;&#x52a0;&#x4e00;&#x4e2a;null&#x503c;&#xff0c;&#x6ce8;&#x610f;&#x4e00;&#x4e2a;&#xff09;&#xa;a.hashCode&#x662f;&#x7528;&#x6765;&#x8ba1;&#x7b97;hash&#x503c;&#x7684;,hash&#x503c;&#x662f;&#x7528;&#x6765;&#x786e;&#x5b9a;hash&#x8868;&#x7d22;&#x5f15;&#x7684;.&#xa;b. hash&#x8868;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7d22;&#x5f15;&#x5904;&#x5b58;&#x653e;&#x7684;&#x662f;&#x4e00;&#x5f20;&#x94fe;&#x8868;, &#x6240;&#x4ee5;&#x8fd8;&#x8981;&#x901a;&#x8fc7;equal&#x65b9;&#x6cd5;&#x5faa;&#x73af;&#x6bd4;&#x8f83;&#x94fe;&#x4e0a;&#x7684;&#x6bcf;&#x4e00;&#x4e2a;&#x5bf9;&#x8c61;&#x624d;&#x53ef;&#x4ee5;&#x771f;&#x6b63;&#x5b9a;&#x4f4d;&#x5230;&#x952e;&#x503c;&#x5bf9;&#x5e94;&#x7684;Entry.&#xa;&#xa;&#x4e3a;&#x4e86;&#x4fdd;&#x8bc1;&#x6570;&#x636e;&#x552f;&#x4e00;&#x6027;,&#x5982;&#x679c;&#x63d2;&#x5165;&#x6570;&#x636e;&#x4f1a;&#x9996;&#x5148;&#x5224;&#x65ad;&#x5143;&#x7d20;&#x7684;hashCode&#x662f;&#x4e0d;&#x662f;&#x76f8;&#x540c;,&#x5982;&#x679c;&#x76f8;&#x540c;&#x8fd8;&#x4f1a;&#x53bb;&#x6bd4;&#x8f83;&#x5143;&#x7d20;&#x7684;equals&#x65b9;&#x6cd5;&#xff0c; &#x53ea;&#x8981;&#x91cd;&#x5199; equals&#xff0c;&#x5c31;&#x5fc5;&#x987b;&#x91cd;&#x5199;hashCode&#x3002;&#xa;2&#xff09; &#x56e0;&#x4e3a; Set&#x5b58;&#x50a8;&#x7684;&#x662f;&#x4e0d;&#x91cd;&#x590d;&#x7684;&#x5bf9;&#x8c61;&#xff0c;&#x4f9d;&#x636e; hashCode&#x548c;equals&#x8fdb;&#x884c;&#x5224;&#x65ad;&#xff0c;&#x6240;&#x4ee5; Set&#x5b58;&#x50a8;&#x7684;&#xa;&#x5bf9;&#x8c61;&#x5fc5;&#x987b;&#x91cd;&#x5199;&#x8fd9;&#x4e24;&#x4e2a;&#x65b9;&#x6cd5;&#x3002;&#xa;3&#xff09; &#x5982;&#x679c;&#x81ea;&#x5b9a;&#x4e49;&#x5bf9;&#x8c61;&#x4f5c;&#x4e3a;Map&#x7684;&#x952e;&#xff0c;&#x90a3;&#x4e48;&#x5fc5;&#x987b;&#x91cd;&#x5199; hashCode&#x548c;equals&#x3002;&#xa;&#x8bf4;&#x660e;&#xff1a;String&#x91cd;&#x5199;&#x4e86;hashCode&#x548c;equals&#x65b9;&#x6cd5;&#xff0c;&#x6240;&#x4ee5;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x975e;&#x5e38;&#x6109;&#x5feb;&#x5730;&#x4f7f;&#x7528; String&#x5bf9;&#x8c61;&#xa;&#x4f5c;&#x4e3a;key&#x6765;&#x4f7f;&#x7528;&#xa;&#xa;"/>
<node CREATED="1561441873246" ID="Freemind_Link_788706616" MODIFIED="1591972185579">
<richcontent TYPE="NODE"><html>
  <head>
    <style type="text/css">
      <!--
        p { margin-top: 0 }
      -->
    </style>
    
  </head>
  <body>
    <p>
      TreeSet&#37319;&#29992;&#32418;&#40657;&#26641;&#30340;&#25968;&#25454;&#32467;&#26500;&#36827;&#34892;&#25490;&#24207;&#20803;&#32032;&#65292;&#20351;&#29992;&#23427;&#21487;&#20197;&#20174;Set&#20013;&#25552;&#21462;&#26377;&#24207;&#65288;&#21319;&#24207;&#25110;&#32773;&#38477;&#24207;&#65289;&#30340;&#24207;&#21015;&#12290;&#36825;&#20010;&#26102;&#20505;&#26159;&#25353;&#29031;&#31867;&#22411;&#30340;&#33258;&#28982;&#25490;&#24207;&#65292;&#20134;&#21487;&#25351;&#23450;&#25490;&#24207;&#26041;&#24335;<br /><br />TreeMap&#38656;&#35201;&#25490;&#24207;,&#25152;&#20197;&#38656;&#35201;Comparator&#20026;&#38190;&#20540;&#36827;&#34892;&#22823;&#23567;&#27604;&#36739;.&#24403;&#28982;&#20063;&#26159;&#29992;Comparator&#23450;&#20301;&#30340;.<br />&#160;&#160;&#160;a. Comparator&#21487;&#20197;&#22312;&#21019;&#24314;TreeMap&#26102;&#25351;&#23450;<br />&#160;&#160;&#160;b. &#22914;&#26524;&#21019;&#24314;&#26102;&#27809;&#26377;&#30830;&#23450;,&#37027;&#20040;&#23601;&#20250;&#20351;&#29992;key.compareTo()&#26041;&#27861;,&#36825;&#23601;&#35201;&#27714;key&#24517;&#39035;&#23454;&#29616;Comparable&#25509;&#21475;.<br />&#160;&#160;&#160;c. TreeMap&#26159;&#20351;&#29992;Tree&#25968;&#25454;&#32467;&#26500;&#23454;&#29616;&#30340;,&#25152;&#20197;&#20351;&#29992;compare&#25509;&#21475;&#23601;&#21487;&#20197;&#23436;&#25104;&#23450;&#20301;&#20102;.<br />&#27880;&#65306;TreeSet&#21028;&#26029;&#20004;&#20010;&#23545;&#35937;&#19981;&#30456;&#31561;&#30340;&#26041;&#24335;1)&#20004;&#20010;&#23545;&#35937;&#36890;&#36807;equals&#26041;&#27861;&#36820;&#22238;false&#65292;2)&#36890;&#36807;CompareTo&#26041;&#27861;&#27604;&#36739;&#27809;&#26377;&#36820;&#22238;0<br />&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#23384;&#20837;&#33258;&#23450;&#20041;&#31867;&#26102;&#65292;TreeSet&#38656;&#35201;&#32500;&#25252;&#20803;&#32032;&#30340;&#23384;&#20648;&#39034;&#24207;&#65292;&#22240;&#27492;&#33258;&#23450;&#20041;&#31867;&#35201;&#23454;&#29616;Comparable&#25509;&#21475;&#24182;&#23450;&#20041;compareTo&#26041;&#27861;&#12290;&#65288;&#19981;&#20250;&#28155;&#21152;&#37325;&#22797;&#30340;&#20803;&#32032;&#65292;&#33258;&#28982;&#25490;&#24207;&#65292;&#19981;&#21487;&#20197;&#28155;&#21152;null&#21542;&#21017;&#22238;&#25253;(NullPointException)&#65289;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1561441911615" ID="Freemind_Link_279976585" MODIFIED="1561441925069" TEXT="LinkedHashSet&#x5185;&#x90e8;&#x4f7f;&#x7528;&#x6563;&#x5217;&#x4ee5;&#x52a0;&#x5feb;&#x67e5;&#x8be2;&#x901f;&#x5ea6;&#xff0c;&#x540c;&#x65f6;&#x4f7f;&#x7528;&#x94fe;&#x8868;&#x7ef4;&#x62a4;&#x5143;&#x7d20;&#x63d2;&#x5165;&#x7684;&#x6b21;&#x5e8f;&#xff0c;&#x5728;&#x4f7f;&#x7528;&#x8fed;&#x4ee3;&#x5668;&#x904d;&#x5386;Set&#x65f6;&#xff0c;&#x7ed3;&#x679c;&#x4f1a;&#x6309;&#x5143;&#x7d20;&#x63d2;&#x5165;&#x7684;&#x6b21;&#x5e8f;&#x663e;&#x793a;&#x3002;&#xff08;&#x4e0d;&#x4f1a;&#x6dfb;&#x52a0;&#x91cd;&#x590d;&#x7684;&#x5143;&#x7d20;&#xff0c;&#x4e0d;&#x4f1a;&#x81ea;&#x7136;&#x6392;&#x5e8f;&#xff0c;&#x53ef;&#x4ee5;&#x6dfb;&#x52a0;null&#x503c;&#xff09;"/>
</node>
</node>
</node>
</node>
</map>
