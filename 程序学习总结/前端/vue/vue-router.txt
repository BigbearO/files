1 动态路径参数，含义：将参数放到路径中，例子:{ path: '/user/:id', component: User }
注：动态路径参数以冒号开头，参数值会被设置到 this.$route.params，
通过$route.params.id进行访问，
注意，动态路径中不同参数访问的是同一个组件，第二次访问时此组件的生命周期钩子函数
不会调用了，所有一些方法不能直接放在钩子函数执行，需要做一些变形
如1）监听route对象 watch: {
    $route(to, from) {
      // 对路由变化作出响应...
    }
  }
2）使用 2.2 中引入的 beforeRouteUpdate 导航守卫：beforeRouteUpdate (to, from, next) {
    // react to route changes...
    // don't forget to call next()
  }
高级匹配模式-1):表示参数（例子-/:id），2)后缀加问号表示可选参数（例子-/:id?）
3)后缀加星号*，表示不定项参数0-n; 加+号表示多个参数1-n '/bar/baz'
（例子-/:id*,加号一样，使用 /ces/ces,则路由里的参数 '/ces/ces' :  '/ces/ces'）
4）自定义匹配-正则表达式[^\/]+，不符合的就无法放到参数里
更多见：https://github.com/pillarjs/path-to-regexp/tree/v1.7.0#parameters


2嵌套路由（子路由）
1）在一个组件A里面添加  <router-view></router-view>
2）配置A的路由，添加属性children:[放子组件路由]，在A页面访问子组件路径时会自动填充
到<router-view></router-view>

3路由跳转方式：router-link和router.push方式（下面的例子是带参数的跳转，本质上to也是调用）
:to="{name:'RouterComponents',params:{id:110}}"
this.$router.push({ name: 'RouterComponents', params: {id: val} })
或者
this.$router.push({ path: `/RouterComponents/${val}`, })
